theory GJMLocks
begin

functions: rep/2 [private], check_rep/2, get_rep/1
equations: check_rep(rep(m,loc),loc)=m, get_rep(rep(m,loc))=m
section{* Garay-Jakobsson-MacKenzie contract signing protocol *}

functions: pk/1, sk/1[private], sign/2, verify/2, true/0, pcs/3, checkpcs/5, convertpcs/2, verify/2, fakepcs/4

equations: verify(sign(m, sk(i)), pk(i))=m,checkpcs(c, pk(s), pk(v), pk(ttp), pcs(sign(c, sk(s)), pk(v), pk(ttp)))=true,convertpcs(sk(ttp), pcs(sign(c, sk(s)), pk(v), pk(ttp)))=sign(c, sk(s)),checkpcs(c, pk(s), pk(v), pk(ttp), fakepcs(pk(s), sk(v), pk(ttp), c))=true
rule Init_: //Init 
 [ Fr(~prog_)] --[Init(), ProgressFrom_(~prog_)]-> [State_(~prog_)]

rule MessageID_rule_: //MessageID-rule 
 [ Fr(~x)] --[]-> [MID_Sender(~x), MID_Receiver(~x)]

rule Par_: //Par 
 [ State_(~prog_)] --[ProgressTo_2(~prog_), ProgressTo_1(~prog_)]-> [State_1(~prog_), State_2(~prog_)]

rule Rep_0_1: //Rep, 0 
 [ State_1(~prog_)] --[]-> [!Semistate_11(~prog_)]

rule Rep_1_1: //Rep, 1 
 [ !Semistate_11(~prog_)] --[]-> [State_11(~prog_)]

rule in_c_A_B_TTP_TTP__11: //in 'c',<$A, $B, <'TTP', $TTP>> 
 [ Fr(~prog_111), State_11(~prog_), In(<'c', <$A, $B, <'TTP', $TTP>>>)] --[ProgressFrom_111(~prog_111), ChannelInEvent(<'c', <$A, $B, <'TTP', $TTP>>>)]-> [State_111($A, $B, $TTP, ~prog_, ~prog_111)]

rule event_TTP_TTP_TTP__111: //event TTP(<'TTP', $TTP>) 
 [ State_111($A, $B, $TTP, ~prog_, ~prog_111)] --[Event(), TTP(<'TTP', $TTP>)]-> [State_1111($A, $B, $TTP, ~prog_, ~prog_111)]

rule Par_1111: //Par 
 [ State_1111($A, $B, $TTP, ~prog_, ~prog_111)] --[]-> [State_11111($A, $B, $TTP, ~prog_, ~prog_111), State_11112($A, $B, $TTP, ~prog_, ~prog_111)]

rule Par_11111: //Par 
 [ State_11111($A, $B, $TTP, ~prog_, ~prog_111)] --[ProgressTo_111112(~prog_111)]-> [State_111111($A, $B, $TTP, ~prog_, ~prog_111), State_111112($A, $B, $TTP, ~prog_, ~prog_111)]

rule Par_111111: //Par 
 [ State_111111($A, $B, $TTP, ~prog_, ~prog_111)] --[ProgressTo_1111112(~prog_111), ProgressTo_1111111(~prog_111)]-> [State_1111111($A, $B, $TTP, ~prog_, ~prog_111), State_1111112($A, $B, $TTP, ~prog_, ~prog_111)]

rule in_c_TEXT_1111111: //in 'c',$TEXT 
 [ Fr(~prog_11111111), State_1111111($A, $B, $TTP, ~prog_, ~prog_111), In(<'c', $TEXT>)] --[ProgressFrom_11111111(~prog_11111111), ChannelInEvent(<'c', $TEXT>)]-> [State_11111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111)]

rule new_sida_11111111: //new sida 
 [ State_11111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111), Fr(sida)] --[]-> [State_111111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, sida)]

rule event_StartA_A_B_TEXT_sida_111111111: //event StartA($A, $B, $TEXT, sida) 
 [ State_111111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, sida)] --[Event(), StartA($A, $B, $TEXT, sida)]-> [State_1111111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, sida)]

rule out_c_pcssign_TEXT_1_sk_A_pk_B_pk_TTP_TTP__1111111111: //out 'c',pcs(sign(<$TEXT, '1'>, sk($A)), pk($B), pk(<'TTP', $TTP>)) 
 [ State_1111111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, sida), In('c')] --[ChannelInEvent('c')]-> [State_11111111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, sida), Out(pcs(sign(<$TEXT, '1'>, sk($A)), pk($B), pk(<'TTP', $TTP>)))]

rule in_c_m2_111111111111: //in 'c',m2 
 [ State_11111111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, sida), In(<'c', m2>)] --[ChannelInEvent(<'c', m2>)]-> [State_1111111111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, m2, sida)]

rule out_c_sign_TEXT_1_sk_A_1111111111111: //out 'c',sign(<$TEXT, '1'>, sk($A)) 
 [ State_1111111111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, m2, sida), In('c')] --[ChannelInEvent('c')]-> [State_11111111111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, m2, sida), Out(sign(<$TEXT, '1'>, sk($A)))]

rule in_c_m4_111111111111111: //in 'c',m4 
 [ State_11111111111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, m2, sida), In(<'c', m4>)] --[ChannelInEvent(<'c', m4>)]-> [State_1111111111111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, m2, m4, sida)]

rule event_ContractA_A_B_TEXT_sida_1111111111111111: //event ContractA($A, $B, $TEXT, sida) 
 [ State_1111111111111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, m2, m4, sida)] --[Event(), ContractA($A, $B, $TEXT, sida)]-> [State_11111111111111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, m2, m4, sida)]

rule event_EndA4_A_B_TEXT_sida_11111111111111111: //event EndA4($A, $B, $TEXT, sida) 
 [ State_11111111111111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, m2, m4, sida)] --[ProgressTo_111111111111111111(~prog_11111111), Event(), EndA4($A, $B, $TEXT, sida)]-> [State_111111111111111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, m2, m4, sida)]

rule Zero_111111111111111111: //Zero 
 [ State_111111111111111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, m2, m4, sida)] --[]-> []

rule out_r_TTP_TTP_sida_sign_TEXT_1_sk_A_m2__111111111111112: //out 'r',<<'TTP', $TTP>, sida, <sign(<$TEXT, '1'>, sk($A)), m2>> 
 [ MID_Sender(mid_111111111111112), State_11111111111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, m2, sida)] --[ProgressTo_1111111111111121(~prog_11111111), Send(mid_111111111111112,<<'TTP', $TTP>, sida, <sign(<$TEXT, '1'>, sk($A)), m2>>)]-> [Out(<<'TTP', $TTP>, sida, <sign(<$TEXT, '1'>, sk($A)), m2>>), State_1111111111111121($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, m2, sida)]

rule in_r_A_sida_m4__1111111111111121: //in 'r',<$A, sida, m4> 
 [ Fr(~prog_11111111111111211), State_1111111111111121($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, m2, sida), In(<$A, sida, m4>), MID_Receiver(mid_1111111111111121)] --[ProgressFrom_11111111111111211(~prog_11111111111111211), Receive(mid_1111111111111121,<$A, sida, m4>)]-> [State_11111111111111211($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, ~prog_11111111111111211, m2, m4, sida)]

rule event_ContractA_A_B_TEXT_sida_11111111111111211: //event ContractA($A, $B, $TEXT, sida) 
 [ State_11111111111111211($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, ~prog_11111111111111211, m2, m4, sida)] --[Event(), ContractA($A, $B, $TEXT, sida)]-> [State_111111111111112111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, ~prog_11111111111111211, m2, m4, sida)]

rule event_EndA3_A_B_TEXT_sida_111111111111112111: //event EndA3($A, $B, $TEXT, sida) 
 [ State_111111111111112111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, ~prog_11111111111111211, m2, m4, sida)] --[ProgressTo_1111111111111121111(~prog_11111111111111211), Event(), EndA3($A, $B, $TEXT, sida)]-> [State_1111111111111121111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, ~prog_11111111111111211, m2, m4, sida)]

rule Zero_1111111111111121111: //Zero 
 [ State_1111111111111121111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, ~prog_11111111111111211, m2, m4, sida)] --[]-> []

rule out_r_TTP_TTP_sida_sign_TEXT_A_B_abort_sk_A___111111111112: //out 'r',<<'TTP', $TTP>, sida, sign(<$TEXT, $A, $B, 'abort'>, sk('A'))> 
 [ MID_Sender(mid_111111111112), State_11111111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, sida)] --[ProgressTo_1111111111121(~prog_11111111), Send(mid_111111111112,<<'TTP', $TTP>, sida, sign(<$TEXT, $A, $B, 'abort'>, sk('A'))>)]-> [Out(<<'TTP', $TTP>, sida, sign(<$TEXT, $A, $B, 'abort'>, sk('A'))>), State_1111111111121($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, sida)]

rule in_r_A_sida_a2__11111111111211: //in 'r',<$A, sida, a2> 
 [ Fr(~prog_111111111112111), State_1111111111121($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, sida), In(<$A, sida, a2>), MID_Receiver(mid_11111111111211)] --[ProgressFrom_111111111112111(~prog_111111111112111), Receive(mid_11111111111211,<$A, sida, a2>)]-> [State_111111111112111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, ~prog_111111111112111, a2, sida)]

rule event_AbortA_A_B_TEXT_sida_111111111112111: //event AbortA($A, $B, $TEXT, sida) 
 [ State_111111111112111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, ~prog_111111111112111, a2, sida)] --[Event(), AbortA($A, $B, $TEXT, sida)]-> [State_1111111111121111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, ~prog_111111111112111, a2, sida)]

rule event_EndA1_A_B_TEXT_sida_1111111111121111: //event EndA1($A, $B, $TEXT, sida) 
 [ State_1111111111121111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, ~prog_111111111112111, a2, sida)] --[ProgressTo_11111111111211111(~prog_111111111112111), Event(), EndA1($A, $B, $TEXT, sida)]-> [State_11111111111211111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, ~prog_111111111112111, a2, sida)]

rule Zero_11111111111211111: //Zero 
 [ State_11111111111211111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, ~prog_111111111112111, a2, sida)] --[]-> []

rule in_r_A_sida_m4__11111111111212: //in 'r',<$A, sida, m4> 
 [ Fr(~prog_111111111112121), State_1111111111121($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, sida), In(<$A, sida, m4>), MID_Receiver(mid_11111111111212)] --[ProgressFrom_111111111112121(~prog_111111111112121), Receive(mid_11111111111212,<$A, sida, m4>)]-> [State_111111111112121($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, ~prog_111111111112121, m4, sida)]

rule event_ContractA_A_B_TEXT_sida_111111111112121: //event ContractA($A, $B, $TEXT, sida) 
 [ State_111111111112121($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, ~prog_111111111112121, m4, sida)] --[Event(), ContractA($A, $B, $TEXT, sida)]-> [State_1111111111121211($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, ~prog_111111111112121, m4, sida)]

rule event_EndA2_A_B_TEXT_sida_1111111111121211: //event EndA2($A, $B, $TEXT, sida) 
 [ State_1111111111121211($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, ~prog_111111111112121, m4, sida)] --[ProgressTo_11111111111212111(~prog_111111111112121), Event(), EndA2($A, $B, $TEXT, sida)]-> [State_11111111111212111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, ~prog_111111111112121, m4, sida)]

rule Zero_11111111111212111: //Zero 
 [ State_11111111111212111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111111, ~prog_111111111112121, m4, sida)] --[]-> []

rule in_c_m1_1111112: //in 'c',m1 
 [ Fr(~prog_11111121), State_1111112($A, $B, $TTP, ~prog_, ~prog_111), In(<'c', m1>)] --[ProgressFrom_11111121(~prog_11111121), ChannelInEvent(<'c', m1>)]-> [State_11111121($A, $B, $TTP, ~prog_, ~prog_111, ~prog_11111121, m1)]

rule new_sidb_11111121: //new sidb 
 [ State_11111121($A, $B, $TTP, ~prog_, ~prog_111, ~prog_11111121, m1), Fr(sidb)] --[]-> [State_111111211($A, $B, $TTP, ~prog_, ~prog_111, ~prog_11111121, m1, sidb)]

rule event_StartB_A_B_TEXT_sidb_111111211: //event StartB($A, $B, $TEXT, sidb) 
 [ State_111111211($A, $B, $TTP, ~prog_, ~prog_111, ~prog_11111121, m1, sidb)] --[Event(), StartB($A, $B, $TEXT, sidb)]-> [State_1111112111($A, $B, $TTP, ~prog_, ~prog_111, ~prog_11111121, m1, sidb)]

rule out_c_pcssign_TEXT_2_sk_B_pk_A_pk_TTP_TTP__1111112111: //out 'c',pcs(sign(<$TEXT, '2'>, sk($B)), pk($A), pk(<'TTP', $TTP>)) 
 [ State_1111112111($A, $B, $TTP, ~prog_, ~prog_111, ~prog_11111121, m1, sidb), In('c')] --[ChannelInEvent('c')]-> [State_11111121111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111121, m1, sidb), Out(pcs(sign(<$TEXT, '2'>, sk($B)), pk($A), pk(<'TTP', $TTP>)))]

rule in_c_m3_111111211111: //in 'c',m3 
 [ State_11111121111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111121, m1, sidb), In(<'c', m3>)] --[ChannelInEvent(<'c', m3>)]-> [State_1111112111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111121, m1, m3, sidb)]

rule event_ContractB_A_B_TEXT_sidb_1111112111111: //event ContractB($A, $B, $TEXT, sidb) 
 [ State_1111112111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111121, m1, m3, sidb)] --[Event(), ContractB($A, $B, $TEXT, sidb)]-> [State_11111121111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111121, m1, m3, sidb)]

rule event_EndB3_A_B_TEXT_sidb_11111121111111: //event EndB3($A, $B, $TEXT, sidb) 
 [ State_11111121111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111121, m1, m3, sidb)] --[Event(), EndB3($A, $B, $TEXT, sidb)]-> [State_111111211111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111121, m1, m3, sidb)]

rule out_c_sign_TEXT_2_sk_B_111111211111111: //out 'c',sign(<$TEXT, '2'>, sk($B)) 
 [ State_111111211111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111121, m1, m3, sidb), In('c')] --[ProgressTo_1111112111111111(~prog_11111121), ChannelInEvent('c')]-> [State_1111112111111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111121, m1, m3, sidb), Out(sign(<$TEXT, '2'>, sk($B)))]

rule Zero_1111112111111111: //Zero 
 [ State_1111112111111111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111121, m1, m3, sidb)] --[]-> []

rule out_r_TTP_TTP_sidb_m1_sign_TEXT_2_sk_B__111111211112: //out 'r',<<'TTP', $TTP>, sidb, <m1, sign(<$TEXT, '2'>, sk($B))>> 
 [ MID_Sender(mid_111111211112), State_11111121111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111121, m1, sidb)] --[ProgressTo_1111112111121(~prog_11111121), Send(mid_111111211112,<<'TTP', $TTP>, sidb, <m1, sign(<$TEXT, '2'>, sk($B))>>)]-> [Out(<<'TTP', $TTP>, sidb, <m1, sign(<$TEXT, '2'>, sk($B))>>), State_1111112111121($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111121, m1, sidb)]

rule in_r_B_sidb_a2__11111121111211: //in 'r',<$B, sidb, a2> 
 [ Fr(~prog_111111211112111), State_1111112111121($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111121, m1, sidb), In(<$B, sidb, a2>), MID_Receiver(mid_11111121111211)] --[ProgressFrom_111111211112111(~prog_111111211112111), Receive(mid_11111121111211,<$B, sidb, a2>)]-> [State_111111211112111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111121, ~prog_111111211112111, a2, m1, sidb)]

rule event_AbortB_A_B_TEXT_sidb_111111211112111: //event AbortB($A, $B, $TEXT, sidb) 
 [ State_111111211112111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111121, ~prog_111111211112111, a2, m1, sidb)] --[Event(), AbortB($A, $B, $TEXT, sidb)]-> [State_1111112111121111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111121, ~prog_111111211112111, a2, m1, sidb)]

rule event_EndB1_A_B_TEXT_sidb_1111112111121111: //event EndB1($A, $B, $TEXT, sidb) 
 [ State_1111112111121111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111121, ~prog_111111211112111, a2, m1, sidb)] --[ProgressTo_11111121111211111(~prog_111111211112111), Event(), EndB1($A, $B, $TEXT, sidb)]-> [State_11111121111211111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111121, ~prog_111111211112111, a2, m1, sidb)]

rule Zero_11111121111211111: //Zero 
 [ State_11111121111211111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111121, ~prog_111111211112111, a2, m1, sidb)] --[]-> []

rule in_r_B_sidb_m3__11111121111212: //in 'r',<$B, sidb, m3> 
 [ Fr(~prog_111111211112121), State_1111112111121($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111121, m1, sidb), In(<$B, sidb, m3>), MID_Receiver(mid_11111121111212)] --[ProgressFrom_111111211112121(~prog_111111211112121), Receive(mid_11111121111212,<$B, sidb, m3>)]-> [State_111111211112121($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111121, ~prog_111111211112121, m1, m3, sidb)]

rule event_ContractB_A_B_TEXT_sidb_111111211112121: //event ContractB($A, $B, $TEXT, sidb) 
 [ State_111111211112121($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111121, ~prog_111111211112121, m1, m3, sidb)] --[Event(), ContractB($A, $B, $TEXT, sidb)]-> [State_1111112111121211($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111121, ~prog_111111211112121, m1, m3, sidb)]

rule event_EndB2_A_B_TEXT_sidb_1111112111121211: //event EndB2($A, $B, $TEXT, sidb) 
 [ State_1111112111121211($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111121, ~prog_111111211112121, m1, m3, sidb)] --[ProgressTo_11111121111212111(~prog_111111211112121), Event(), EndB2($A, $B, $TEXT, sidb)]-> [State_11111121111212111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111121, ~prog_111111211112121, m1, m3, sidb)]

rule Zero_11111121111212111: //Zero 
 [ State_11111121111212111($A, $B, $TEXT, $TTP, ~prog_, ~prog_111, ~prog_11111121, ~prog_111111211112121, m1, m3, sidb)] --[]-> []

rule in_r_TTPID_sida_a1__1111121: //in 'r',<TTPID, sida, a1> 
 [ Fr(~prog_11111211), State_111112($A, $B, $TTP, ~prog_, ~prog_111), In(<TTPID, sida, a1>), MID_Receiver(mid_1111121)] --[ProgressFrom_11111211(~prog_11111211), Receive(mid_1111121,<TTPID, sida, a1>)]-> [State_11111211($A, $B, $TTP, ~prog_, ~prog_111, ~prog_11111211, TTPID, a1, sida)]

rule lock_TEXT_11111211: //lock $TEXT 
 [ State_11111211($A, $B, $TTP, ~prog_, ~prog_111, ~prog_11111211, TTPID, a1, sida), Fr(~lock6)] --[Lock(~lock6, $TEXT)]-> [State_111112111($A, $B, $TTP, ~lock6, ~prog_, ~prog_111, ~prog_11111211, TTPID, a1, sida)]

rule out_r_A_sida_signa1_skTTPID__111112111: //out 'r',<$A, sida, sign(a1, sk(TTPID))> 
 [ MID_Sender(mid_111112111), State_111112111($A, $B, $TTP, ~lock6, ~prog_, ~prog_111, ~prog_11111211, TTPID, a1, sida)] --[Send(mid_111112111,<$A, sida, sign(a1, sk(TTPID))>)]-> [Out(<$A, sida, sign(a1, sk(TTPID))>), State_1111121111($A, $B, $TTP, ~lock6, ~prog_, ~prog_111, ~prog_11111211, TTPID, a1, sida)]

rule event_AbortCert_A_B_TEXT_1111121111: //event AbortCert($A, $B, $TEXT) 
 [ State_1111121111($A, $B, $TTP, ~lock6, ~prog_, ~prog_111, ~prog_11111211, TTPID, a1, sida)] --[ProgressTo_11111211111(~prog_11111211), Event(), AbortCert($A, $B, $TEXT)]-> [State_11111211111($A, $B, $TTP, ~lock6, ~prog_, ~prog_111, ~prog_11111211, TTPID, a1, sida)]

rule in_r_TTPID_sidb_r2__11111211111: //in 'r',<TTPID, sidb, r2> 
 [ Fr(~prog_111112111111), State_11111211111($A, $B, $TTP, ~lock6, ~prog_, ~prog_111, ~prog_11111211, TTPID, a1, sida), In(<TTPID, sidb, r2>), MID_Receiver(mid_11111211111)] --[ProgressFrom_111112111111(~prog_111112111111), Receive(mid_11111211111,<TTPID, sidb, r2>)]-> [State_111112111111($A, $B, $TTP, ~lock6, ~prog_, ~prog_111, ~prog_11111211, ~prog_111112111111, TTPID, a1, r2, sida, sidb)]

rule out_r_B_sidb_signa1_skTTPID__111112111111: //out 'r',<$B, sidb, sign(a1, sk(TTPID))> 
 [ MID_Sender(mid_111112111111), State_111112111111($A, $B, $TTP, ~lock6, ~prog_, ~prog_111, ~prog_11111211, ~prog_111112111111, TTPID, a1, r2, sida, sidb)] --[ProgressTo_1111121111111(~prog_111112111111), Send(mid_111112111111,<$B, sidb, sign(a1, sk(TTPID))>)]-> [Out(<$B, sidb, sign(a1, sk(TTPID))>), State_1111121111111($A, $B, $TTP, ~lock6, ~prog_, ~prog_111, ~prog_11111211, ~prog_111112111111, TTPID, a1, r2, sida, sidb)]

rule Zero_1111121111111: //Zero 
 [ State_1111121111111($A, $B, $TTP, ~lock6, ~prog_, ~prog_111, ~prog_11111211, ~prog_111112111111, TTPID, a1, r2, sida, sidb)] --[]-> []

rule in_r_TTPID_sida_r1__11111221: //in 'r',<TTPID, sida, r1> 
 [ Fr(~prog_111112211), State_111112($A, $B, $TTP, ~prog_, ~prog_111), In(<TTPID, sida, r1>), MID_Receiver(mid_11111221)] --[ProgressFrom_111112211(~prog_111112211), Receive(mid_11111221,<TTPID, sida, r1>)]-> [State_111112211($A, $B, $TTP, ~prog_, ~prog_111, ~prog_111112211, TTPID, r1, sida)]

rule lock_TEXT_111112211: //lock $TEXT 
 [ State_111112211($A, $B, $TTP, ~prog_, ~prog_111, ~prog_111112211, TTPID, r1, sida), Fr(~lock4)] --[Lock(~lock4, $TEXT)]-> [State_1111122111($A, $B, $TTP, ~lock4, ~prog_, ~prog_111, ~prog_111112211, TTPID, r1, sida)]

rule out_r_A_sida_convertpcsskTTPID_pcssign_TEXT_2_sk_B_pk_A_pkTTPID__1111122111: //out 'r',<$A, sida, convertpcs(sk(TTPID), pcs(sign(<$TEXT, '2'>, sk($B)), pk($A), pk(TTPID)))> 
 [ MID_Sender(mid_1111122111), State_1111122111($A, $B, $TTP, ~lock4, ~prog_, ~prog_111, ~prog_111112211, TTPID, r1, sida)] --[Send(mid_1111122111,<$A, sida, convertpcs(sk(TTPID), pcs(sign(<$TEXT, '2'>, sk($B)), pk($A), pk(TTPID)))>)]-> [Out(<$A, sida, convertpcs(sk(TTPID), pcs(sign(<$TEXT, '2'>, sk($B)), pk($A), pk(TTPID)))>), State_11111221111($A, $B, $TTP, ~lock4, ~prog_, ~prog_111, ~prog_111112211, TTPID, r1, sida)]

rule event_ResolveCert_A_B_TEXT_11111221111: //event ResolveCert($A, $B, $TEXT) 
 [ State_11111221111($A, $B, $TTP, ~lock4, ~prog_, ~prog_111, ~prog_111112211, TTPID, r1, sida)] --[ProgressTo_111112211111(~prog_111112211), Event(), ResolveCert($A, $B, $TEXT)]-> [State_111112211111($A, $B, $TTP, ~lock4, ~prog_, ~prog_111, ~prog_111112211, TTPID, r1, sida)]

rule Zero_111112211111: //Zero 
 [ State_111112211111($A, $B, $TTP, ~lock4, ~prog_, ~prog_111, ~prog_111112211, TTPID, r1, sida)] --[]-> []

rule in_r_TTPID_sidb_r2__11111222: //in 'r',<TTPID, sidb, r2> 
 [ Fr(~prog_111112221), State_111112($A, $B, $TTP, ~prog_, ~prog_111), In(<TTPID, sidb, r2>), MID_Receiver(mid_11111222)] --[ProgressFrom_111112221(~prog_111112221), Receive(mid_11111222,<TTPID, sidb, r2>)]-> [State_111112221($A, $B, $TTP, ~prog_, ~prog_111, ~prog_111112221, TTPID, r2, sidb)]

rule lock_TEXT_111112221: //lock $TEXT 
 [ State_111112221($A, $B, $TTP, ~prog_, ~prog_111, ~prog_111112221, TTPID, r2, sidb), Fr(~lock7)] --[Lock(~lock7, $TEXT)]-> [State_1111122211($A, $B, $TTP, ~lock7, ~prog_, ~prog_111, ~prog_111112221, TTPID, r2, sidb)]

rule out_r_B_sidb_sign_TEXT_1_sk_A__1111122211: //out 'r',<$B, sidb, sign(<$TEXT, '1'>, sk($A))> 
 [ MID_Sender(mid_1111122211), State_1111122211($A, $B, $TTP, ~lock7, ~prog_, ~prog_111, ~prog_111112221, TTPID, r2, sidb)] --[Send(mid_1111122211,<$B, sidb, sign(<$TEXT, '1'>, sk($A))>)]-> [Out(<$B, sidb, sign(<$TEXT, '1'>, sk($A))>), State_11111222111($A, $B, $TTP, ~lock7, ~prog_, ~prog_111, ~prog_111112221, TTPID, r2, sidb)]

rule event_ResolveCert_A_B_TEXT_11111222111: //event ResolveCert($A, $B, $TEXT) 
 [ State_11111222111($A, $B, $TTP, ~lock7, ~prog_, ~prog_111, ~prog_111112221, TTPID, r2, sidb)] --[ProgressTo_111112221111(~prog_111112221), Event(), ResolveCert($A, $B, $TEXT)]-> [State_111112221111($A, $B, $TTP, ~lock7, ~prog_, ~prog_111, ~prog_111112221, TTPID, r2, sidb)]

rule in_r_TTPID_sida_a1__1111122211111: //in 'r',<TTPID, sida, a1> 
 [ Fr(~prog_11111222111111), State_111112221111($A, $B, $TTP, ~lock7, ~prog_, ~prog_111, ~prog_111112221, TTPID, r2, sidb), In(<TTPID, sida, a1>), MID_Receiver(mid_1111122211111)] --[ProgressFrom_11111222111111(~prog_11111222111111), Receive(mid_1111122211111,<TTPID, sida, a1>)]-> [State_11111222111111($A, $B, $TTP, ~lock7, ~prog_, ~prog_111, ~prog_111112221, ~prog_11111222111111, TTPID, a1, r2, sida, sidb)]

rule out_r_A_sida_sign_TEXT_2_sk_B__11111222111111: //out 'r',<$A, sida, sign(<$TEXT, '2'>, sk($B))> 
 [ MID_Sender(mid_11111222111111), State_11111222111111($A, $B, $TTP, ~lock7, ~prog_, ~prog_111, ~prog_111112221, ~prog_11111222111111, TTPID, a1, r2, sida, sidb)] --[ProgressTo_111112221111111(~prog_11111222111111), Send(mid_11111222111111,<$A, sida, sign(<$TEXT, '2'>, sk($B))>)]-> [Out(<$A, sida, sign(<$TEXT, '2'>, sk($B))>), State_111112221111111($A, $B, $TTP, ~lock7, ~prog_, ~prog_111, ~prog_111112221, ~prog_11111222111111, TTPID, a1, r2, sida, sidb)]

rule Zero_111112221111111: //Zero 
 [ State_111112221111111($A, $B, $TTP, ~lock7, ~prog_, ~prog_111, ~prog_111112221, ~prog_11111222111111, TTPID, a1, r2, sida, sidb)] --[]-> []

rule in_r_TTPID_sida_r1__1111122211112: //in 'r',<TTPID, sida, r1> 
 [ Fr(~prog_11111222111121), State_111112221111($A, $B, $TTP, ~lock7, ~prog_, ~prog_111, ~prog_111112221, TTPID, r2, sidb), In(<TTPID, sida, r1>), MID_Receiver(mid_1111122211112)] --[ProgressFrom_11111222111121(~prog_11111222111121), Receive(mid_1111122211112,<TTPID, sida, r1>)]-> [State_11111222111121($A, $B, $TTP, ~lock7, ~prog_, ~prog_111, ~prog_111112221, ~prog_11111222111121, TTPID, r1, r2, sida, sidb)]

rule out_r_A_sida_sign_TEXT_2_sk_B__11111222111121: //out 'r',<$A, sida, sign(<$TEXT, '2'>, sk($B))> 
 [ MID_Sender(mid_11111222111121), State_11111222111121($A, $B, $TTP, ~lock7, ~prog_, ~prog_111, ~prog_111112221, ~prog_11111222111121, TTPID, r1, r2, sida, sidb)] --[ProgressTo_111112221111211(~prog_11111222111121), Send(mid_11111222111121,<$A, sida, sign(<$TEXT, '2'>, sk($B))>)]-> [Out(<$A, sida, sign(<$TEXT, '2'>, sk($B))>), State_111112221111211($A, $B, $TTP, ~lock7, ~prog_, ~prog_111, ~prog_111112221, ~prog_11111222111121, TTPID, r1, r2, sida, sidb)]

rule Zero_111112221111211: //Zero 
 [ State_111112221111211($A, $B, $TTP, ~lock7, ~prog_, ~prog_111, ~prog_111112221, ~prog_11111222111121, TTPID, r1, r2, sida, sidb)] --[]-> []

rule Par_11112: //Par 
 [ State_11112($A, $B, $TTP, ~prog_, ~prog_111)] --[ProgressTo_111122(~prog_111), ProgressTo_111121(~prog_111)]-> [State_111121($A, $B, $TTP, ~prog_, ~prog_111), State_111122($A, $B, $TTP, ~prog_, ~prog_111)]

rule in_c_m3_m4__111121: //in 'c',<m3, m4> 
 [ Fr(~prog_1111211), State_111121($A, $B, $TTP, ~prog_, ~prog_111), In(<'c', <m3, m4>>)] --[ProgressFrom_1111211(~prog_1111211), ChannelInEvent(<'c', <m3, m4>>)]-> [State_1111211($A, $B, $TTP, ~prog_, ~prog_111, ~prog_1111211, m3, m4)]

rule event_ContractJudge_A_B_TEXT_1111211: //event ContractJudge($A, $B, $TEXT) 
 [ State_1111211($A, $B, $TTP, ~prog_, ~prog_111, ~prog_1111211, m3, m4)] --[ProgressTo_11112111(~prog_1111211), Event(), ContractJudge($A, $B, $TEXT)]-> [State_11112111($A, $B, $TTP, ~prog_, ~prog_111, ~prog_1111211, m3, m4)]

rule Zero_11112111: //Zero 
 [ State_11112111($A, $B, $TTP, ~prog_, ~prog_111, ~prog_1111211, m3, m4)] --[]-> []

rule in_c_a2_111122: //in 'c',a2 
 [ Fr(~prog_1111221), State_111122($A, $B, $TTP, ~prog_, ~prog_111), In(<'c', a2>)] --[ProgressFrom_1111221(~prog_1111221), ChannelInEvent(<'c', a2>)]-> [State_1111221($A, $B, $TTP, ~prog_, ~prog_111, ~prog_1111221, a2)]

rule event_AbortJudge_A_B_TEXT_1111221: //event AbortJudge($A, $B, $TEXT) 
 [ State_1111221($A, $B, $TTP, ~prog_, ~prog_111, ~prog_1111221, a2)] --[ProgressTo_11112211(~prog_1111221), Event(), AbortJudge($A, $B, $TEXT)]-> [State_11112211($A, $B, $TTP, ~prog_, ~prog_111, ~prog_1111221, a2)]

rule Zero_11112211: //Zero 
 [ State_11112211($A, $B, $TTP, ~prog_, ~prog_111, ~prog_1111221, a2)] --[]-> []

rule Rep_0_2: //Rep, 0 
 [ State_2(~prog_)] --[]-> [!Semistate_21(~prog_)]

rule Rep_1_2: //Rep, 1 
 [ !Semistate_21(~prog_)] --[]-> [State_21(~prog_)]

rule in_c_corrupt_x__21: //in 'c',<'corrupt', $x> 
 [ Fr(~prog_211), State_21(~prog_), In(<'c', <'corrupt', $x>>)] --[ProgressFrom_211(~prog_211), ChannelInEvent(<'c', <'corrupt', $x>>)]-> [State_211($x, ~prog_, ~prog_211)]

rule event_Corrupt_x_211: //event Corrupt($x) 
 [ State_211($x, ~prog_, ~prog_211)] --[Event(), Corrupt($x)]-> [State_2111($x, ~prog_, ~prog_211)]

rule out_c_sk_x_2111: //out 'c',sk($x) 
 [ State_2111($x, ~prog_, ~prog_211), In('c')] --[ChannelInEvent('c')]-> [State_21111($x, ~prog_, ~prog_211), Out(sk($x))]

rule Par_21111: //Par 
 [ State_21111($x, ~prog_, ~prog_211)] --[ProgressTo_211112(~prog_211)]-> [State_211111($x, ~prog_, ~prog_211), State_211112($x, ~prog_, ~prog_211)]

rule Par_211111: //Par 
 [ State_211111($x, ~prog_, ~prog_211)] --[ProgressTo_2111112(~prog_211)]-> [State_2111111($x, ~prog_, ~prog_211), State_2111112($x, ~prog_, ~prog_211)]

rule Par_2111111: //Par 
 [ State_2111111($x, ~prog_, ~prog_211)] --[ProgressTo_21111112(~prog_211), ProgressTo_21111111(~prog_211)]-> [State_21111111($x, ~prog_, ~prog_211), State_21111112($x, ~prog_, ~prog_211)]

rule Rep_0_21111111: //Rep, 0 
 [ State_21111111($x, ~prog_, ~prog_211)] --[]-> [!Semistate_211111111($x, ~prog_, ~prog_211)]

rule Rep_1_21111111: //Rep, 1 
 [ !Semistate_211111111($x, ~prog_, ~prog_211)] --[]-> [State_211111111($x, ~prog_, ~prog_211)]

rule in_r_responder_x_TTPID_m__211111111: //in 'r',<'responder', $x, TTPID, m> 
 [ State_211111111($x, ~prog_, ~prog_211), In(<'responder', $x, TTPID, m>), MID_Receiver(mid_211111111)] --[Receive(mid_211111111,<'responder', $x, TTPID, m>)]-> [State_2111111111($x, ~prog_, ~prog_211, TTPID, m)]

rule Zero_2111111111: //Zero 
 [ State_2111111111($x, ~prog_, ~prog_211, TTPID, m)] --[]-> []

rule Rep_0_21111112: //Rep, 0 
 [ State_21111112($x, ~prog_, ~prog_211)] --[]-> [!Semistate_211111121($x, ~prog_, ~prog_211)]

rule Rep_1_21111112: //Rep, 1 
 [ !Semistate_211111121($x, ~prog_, ~prog_211)] --[]-> [State_211111121($x, ~prog_, ~prog_211)]

rule in_r_originator_x_TTPID_m__211111121: //in 'r',<'originator', $x, TTPID, m> 
 [ State_211111121($x, ~prog_, ~prog_211), In(<'originator', $x, TTPID, m>), MID_Receiver(mid_211111121)] --[Receive(mid_211111121,<'originator', $x, TTPID, m>)]-> [State_2111111211($x, ~prog_, ~prog_211, TTPID, m)]

rule Zero_2111111211: //Zero 
 [ State_2111111211($x, ~prog_, ~prog_211, TTPID, m)] --[]-> []

rule Rep_0_2111112: //Rep, 0 
 [ State_2111112($x, ~prog_, ~prog_211)] --[]-> [!Semistate_21111121($x, ~prog_, ~prog_211)]

rule Rep_1_2111112: //Rep, 1 
 [ !Semistate_21111121($x, ~prog_, ~prog_211)] --[]-> [State_21111121($x, ~prog_, ~prog_211)]

rule in_r_responder_TTPID_x_m__21111121: //in 'r',<'responder', TTPID, $x, m> 
 [ State_21111121($x, ~prog_, ~prog_211), In(<'responder', TTPID, $x, m>), MID_Receiver(mid_21111121)] --[Receive(mid_21111121,<'responder', TTPID, $x, m>)]-> [State_211111211($x, ~prog_, ~prog_211, TTPID, m)]

rule Zero_211111211: //Zero 
 [ State_211111211($x, ~prog_, ~prog_211, TTPID, m)] --[]-> []

rule Rep_0_211112: //Rep, 0 
 [ State_211112($x, ~prog_, ~prog_211)] --[]-> [!Semistate_2111121($x, ~prog_, ~prog_211)]

rule Rep_1_211112: //Rep, 1 
 [ !Semistate_2111121($x, ~prog_, ~prog_211)] --[]-> [State_2111121($x, ~prog_, ~prog_211)]

rule in_r_originator_TTPID_x_m__2111121: //in 'r',<'originator', TTPID, $x, m> 
 [ State_2111121($x, ~prog_, ~prog_211), In(<'originator', TTPID, $x, m>), MID_Receiver(mid_2111121)] --[Receive(mid_2111121,<'originator', TTPID, $x, m>)]-> [State_21111211($x, ~prog_, ~prog_211, TTPID, m)]

rule Zero_21111211: //Zero 
 [ State_21111211($x, ~prog_, ~prog_211, TTPID, m)] --[]-> []


restriction locking:
"All l x lp #t1 #t3 . Lock(l,x)@t1 & Lock(lp,x)@t3 
        ==> 
        ( #t1<#t3 
                & (Ex #t2. Unlock(l,x)@t2 & #t1<#t2 & #t2<#t3 
                 & (All  #t0 . Unlock(l,x)@t0 ==> #t0=#t2) 
                 & (All lp #t0 . Lock(lp,x)@t0 ==> #t0<#t1 | #t0=#t1 | #t2<#t0) 
                 & (All lp #t0 . Unlock(lp,x)@t0 ==> #t0<#t1 | #t2<#t0 | #t2=#t0 )
                ))
        | #t3<#t1 | #t1=#t3 "


restriction single_session: // for a single session
    "All #i #j. Init()@i & Init()@j ==> #i=#j"


restriction progress_111112221_to_111112221111:
    "All p #t1. ProgressFrom_111112221(p )@t1 ==> 
       (Ex #t2. ProgressTo_111112221111(p )@t2)
    "

restriction progress_1111221_to_11112211:
    "All p #t1. ProgressFrom_1111221(p )@t1 ==> 
       (Ex #t2. ProgressTo_11112211(p )@t2)
    "

restriction progress_111111211112121_to_11111121111212111:
    "All p #t1. ProgressFrom_111111211112121(p )@t1 ==> 
       (Ex #t2. ProgressTo_11111121111212111(p )@t2)
    "

restriction progress_111111111112121_to_11111111111212111:
    "All p #t1. ProgressFrom_111111111112121(p )@t1 ==> 
       (Ex #t2. ProgressTo_11111111111212111(p )@t2)
    "

restriction progress_11111222111121_to_111112221111211:
    "All p #t1. ProgressFrom_11111222111121(p )@t1 ==> 
       (Ex #t2. ProgressTo_111112221111211(p )@t2)
    "

restriction progress_11111121_to_1111112111111111_or_1111112111121:
    "All p #t1. ProgressFrom_11111121(p )@t1 ==> 
       (Ex #t2. ProgressTo_1111112111111111(p )@t2)
	 | (Ex #t2. ProgressTo_1111112111121(p )@t2)
    "

restriction progress_111112211_to_111112211111:
    "All p #t1. ProgressFrom_111112211(p )@t1 ==> 
       (Ex #t2. ProgressTo_111112211111(p )@t2)
    "

restriction progress_11111111111111211_to_1111111111111121111:
    "All p #t1. ProgressFrom_11111111111111211(p )@t1 ==> 
       (Ex #t2. ProgressTo_1111111111111121111(p )@t2)
    "

restriction progress_11111211_to_11111211111:
    "All p #t1. ProgressFrom_11111211(p )@t1 ==> 
       (Ex #t2. ProgressTo_11111211111(p )@t2)
    "

restriction progress_1111211_to_11112111:
    "All p #t1. ProgressFrom_1111211(p )@t1 ==> 
       (Ex #t2. ProgressTo_11112111(p )@t2)
    "

restriction progress_211_to_211112:
    "All p #t1. ProgressFrom_211(p )@t1 ==> 
       (Ex #t2. ProgressTo_211112(p )@t2)
    "

restriction progress_211_to_2111112:
    "All p #t1. ProgressFrom_211(p )@t1 ==> 
       (Ex #t2. ProgressTo_2111112(p )@t2)
    "

restriction progress_211_to_21111112:
    "All p #t1. ProgressFrom_211(p )@t1 ==> 
       (Ex #t2. ProgressTo_21111112(p )@t2)
    "

restriction progress_211_to_21111111:
    "All p #t1. ProgressFrom_211(p )@t1 ==> 
       (Ex #t2. ProgressTo_21111111(p )@t2)
    "

restriction progress_111111211112111_to_11111121111211111:
    "All p #t1. ProgressFrom_111111211112111(p )@t1 ==> 
       (Ex #t2. ProgressTo_11111121111211111(p )@t2)
    "

restriction progress_111111111112111_to_11111111111211111:
    "All p #t1. ProgressFrom_111111111112111(p )@t1 ==> 
       (Ex #t2. ProgressTo_11111111111211111(p )@t2)
    "

restriction progress_11111222111111_to_111112221111111:
    "All p #t1. ProgressFrom_11111222111111(p )@t1 ==> 
       (Ex #t2. ProgressTo_111112221111111(p )@t2)
    "

restriction progress_111112111111_to_1111121111111:
    "All p #t1. ProgressFrom_111112111111(p )@t1 ==> 
       (Ex #t2. ProgressTo_1111121111111(p )@t2)
    "

restriction progress_11111111_to_111111111111111111_or_1111111111121_or_1111111111111121:
    "All p #t1. ProgressFrom_11111111(p )@t1 ==> 
       (Ex #t2. ProgressTo_111111111111111111(p )@t2)
	 | (Ex #t2. ProgressTo_1111111111121(p )@t2)
	 | (Ex #t2. ProgressTo_1111111111111121(p )@t2)
    "

restriction progress_111_to_111122:
    "All p #t1. ProgressFrom_111(p )@t1 ==> 
       (Ex #t2. ProgressTo_111122(p )@t2)
    "

restriction progress_111_to_1111112:
    "All p #t1. ProgressFrom_111(p )@t1 ==> 
       (Ex #t2. ProgressTo_1111112(p )@t2)
    "

restriction progress_111_to_111112:
    "All p #t1. ProgressFrom_111(p )@t1 ==> 
       (Ex #t2. ProgressTo_111112(p )@t2)
    "

restriction progress_111_to_111121:
    "All p #t1. ProgressFrom_111(p )@t1 ==> 
       (Ex #t2. ProgressTo_111121(p )@t2)
    "

restriction progress_111_to_1111111:
    "All p #t1. ProgressFrom_111(p )@t1 ==> 
       (Ex #t2. ProgressTo_1111111(p )@t2)
    "

restriction progress__to_2:
    "All p #t1. ProgressFrom_(p )@t1 ==> 
       (Ex #t2. ProgressTo_2(p )@t2)
    "

restriction progress__to_1:
    "All p #t1. ProgressFrom_(p )@t1 ==> 
       (Ex #t2. ProgressTo_1(p )@t2)
    "


restriction progress_init:
    " Ex #t. Init()@t "

restriction resilient: 
    "All #i x y. Send(x,y)@i ==> Ex #j. Receive(x,y)@j & #i<#j "

lemma sanity_a4b3 : exists-trace
"	Ex #i #j a b t sida sidb. EndA4(a, b, t, sida) @ i & EndB3(a, b, t, sidb) @ j & not( Ex #k. Corrupt(a) @ k ) & not( Ex #k. Corrupt(b) @ k )"

lemma sanity_a1b1 : exists-trace
"	Ex #i #j a b t sida sidb. EndA1(a, b, t, sida) @ i & EndB1(a, b, t, sidb) @ j & not( Ex #k. Corrupt(a) @ k ) & not( Ex #k. Corrupt(b) @ k )"

lemma sanity_a2b2 : exists-trace
"	Ex #i #j a b t sida sidb. EndA2(a, b, t, sida) @ i & EndB2(a, b, t, sidb) @ j & not( Ex #k. Corrupt(a) @ k ) & not( Ex #k. Corrupt(b) @ k )"

lemma sanity_a3b3 : exists-trace
"	Ex #i #j a b t sida sidb. EndA2(a, b, t, sida) @ i & EndB2(a, b, t, sidb) @ j & not( Ex #k. Corrupt(a) @ k ) & not( Ex #k. Corrupt(b) @ k )"

lemma timelinessA [reuse]:
"	All #i a b t sida. StartA(a, b, t, sida) @ i ==> ( Ex #j. ContractA(a, b, t, sida) @ j ) | ( Ex #j. AbortA(a, b, t, sida) @ j ) | ( Ex #j. Corrupt(a) @ j )"

lemma timelinessB [reuse]:
"	All #i a b t nb. StartB(a, b, t, nb) @ i ==> ( Ex #j. ContractB(a, b, t, nb) @ j ) | ( Ex #j. AbortB(a, b, t, nb) @ j ) | ( Ex #j. Corrupt(b) @ j )"

lemma fullfairnessA :
"	All #i a b t. ContractJudge(a, b, t) @ i ==> ( Ex #j sida. ContractA(a, b, t, sida) @ j ) | ( Ex #k. Corrupt(a) @ k )"

end
