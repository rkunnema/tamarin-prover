theory SetAbst
begin

functions: rep/2 [private], check_rep/2, get_rep/1
equations: check_rep(rep(m,loc),loc)=m, get_rep(rep(m,loc))=m
section{* The PKI-example *}

builtins: asymmetric-encryption, signing
rule Init_: //Init 
 [ ] --[Init()]-> [State_()]

rule Rep_0_: //Rep, 0 
 [ State_()] --[]-> [!Semistate_1()]

rule Rep_1_: //Rep, 1 
 [ !Semistate_1()] --[]-> [State_1()]

rule Par_1: //Par 
 [ State_1()] --[]-> [State_11(), State_12()]

rule new_pki_11: //new pki 
 [ State_11(), Fr(pki)] --[]-> [State_111(pki)]

rule Rep_0_111: //Rep, 0 
 [ State_111(pki)] --[]-> [!Semistate_1111(pki)]

rule Rep_1_111: //Rep, 1 
 [ !Semistate_1111(pki)] --[]-> [State_1111(pki)]

rule Par_1111: //Par 
 [ State_1111(pki)] --[]-> [State_11111(pki), State_11112(pki)]

rule Par_11111: //Par 
 [ State_11111(pki)] --[]-> [State_111111(pki), State_111112(pki)]

rule in_new_user__111111: //in <'new', user> 
 [ State_111111(pki), In(<'new', user>)] --[]-> [State_1111111(pki, user)]

rule new_sk_1111111: //new ~sk 
 [ State_1111111(pki, user), Fr(~sk)] --[]-> [State_11111111(~sk, pki, user)]

rule MSR_11111111: //MSR 
 [ State_11111111(~sk, pki, user)] --[Event(), HonestKey(~sk)]-> [State_111111111(~sk, pki, user), ServerDB(pki, user, pk(~sk)), ClientKey(user, ~sk)]

rule out_pksk_111111111: //out pk(~sk) 
 [ State_111111111(~sk, pki, user)] --[]-> [State_1111111111(~sk, pki, user), Out(pk(~sk))]

rule Zero_1111111111: //Zero 
 [ State_1111111111(~sk, pki, user)] --[]-> []

rule in_user_sk__111112: //in <user, sk> 
 [ State_111112(pki), In(<user, sk>)] --[]-> [State_1111121(pki, sk, user)]

rule MSR_1111121: //MSR 
 [ State_1111121(pki, sk, user)] --[Event()]-> [State_11111211(pki, sk, user), ServerDB(pki, user, pk(sk))]

rule Zero_11111211: //Zero 
 [ State_11111211(pki, sk, user)] --[]-> []

rule in_renew_user_pknsk__11112: //in <'renew', user, pk(nsk)> 
 [ State_11112(pki), In(<'renew', user, pk(nsk)>)] --[]-> [State_111121(nsk, pki, user)]

rule in_sign_renew_user_pknsk_sk_111121: //in sign(<'renew', user, pk(nsk)>, sk) 
 [ State_111121(nsk, pki, user), In(sign(<'renew', user, pk(nsk)>, sk))] --[]-> [State_1111211(nsk, pki, sk, user)]

rule MSR_1111211: //MSR 
 [ State_1111211(nsk, pki, sk, user), ServerDB(pki, user, pk(sk))] --[Event()]-> [State_11112111(nsk, pki, sk, user), ServerDB(pki, user, pk(nsk))]

rule out_sign_confirm_sign_renew_user_pknsk_sk_pki_11112111: //out sign(<'confirm', sign(<'renew', user, pk(nsk)>, sk)>, pki) 
 [ State_11112111(nsk, pki, sk, user)] --[]-> [State_111121111(nsk, pki, sk, user), Out(sign(<'confirm', sign(<'renew', user, pk(nsk)>, sk)>, pki))]

rule Zero_111121111: //Zero 
 [ State_111121111(nsk, pki, sk, user)] --[]-> []

rule new_user_12: //new user 
 [ State_12(), Fr(user)] --[]-> [State_121(user)]

rule Rep_0_121: //Rep, 0 
 [ State_121(user)] --[]-> [!Semistate_1211(user)]

rule Rep_1_121: //Rep, 1 
 [ !Semistate_1211(user)] --[]-> [State_1211(user)]

rule new_nsk_1211: //new ~nsk 
 [ State_1211(user), Fr(~nsk)] --[]-> [State_12111(~nsk, user)]

rule MSR_12111: //MSR 
 [ State_12111(~nsk, user), ClientKey(user, ~sk)] --[Event(), HonestKey(~nsk)]-> [State_121111(~nsk, ~sk, user), ClientKey(user, ~nsk)]

rule out_renew_user_pknsk__121111: //out <'renew', user, pk(~nsk)> 
 [ State_121111(~nsk, ~sk, user)] --[]-> [State_1211111(~nsk, ~sk, user), Out(<'renew', user, pk(~nsk)>)]

rule out_sign_renew_user_pknsk_sk_1211111: //out sign(<'renew', user, pk(~nsk)>, ~sk) 
 [ State_1211111(~nsk, ~sk, user)] --[]-> [State_12111111(~nsk, ~sk, user), Out(sign(<'renew', user, pk(~nsk)>, ~sk))]

rule in_sign_confirm_sign_renew_user_pknsk_sk_pki_12111111: //in sign(<'confirm', sign(<'renew', user, pk(~nsk)>, ~sk)>, pki) 
 [ State_12111111(~nsk, ~sk, user), In(sign(<'confirm', sign(<'renew', user, pk(~nsk)>, ~sk)>, pki))] --[]-> [State_121111111(~nsk, ~sk, pki, user)]

rule event_Revokedsk_121111111: //event Revoked(~sk) 
 [ State_121111111(~nsk, ~sk, pki, user)] --[Event(), Revoked(~sk)]-> [State_1211111111(~nsk, ~sk, pki, user)]

rule out_sk_1211111111: //out ~sk 
 [ State_1211111111(~nsk, ~sk, pki, user)] --[]-> [State_12111111111(~nsk, ~sk, pki, user), Out(~sk)]

rule Zero_12111111111: //Zero 
 [ State_12111111111(~nsk, ~sk, pki, user)] --[]-> []


restriction single_session: // for a single session
    "All #i #j. Init()@i & Init()@j ==> #i=#j"

lemma Knows_Honest_Key_imp_Revoked :
"	All sk #i #d. HonestKey(sk) @ i & K(sk) @ d ==> ( Ex #r. Revoked(sk) @ r )"

end
