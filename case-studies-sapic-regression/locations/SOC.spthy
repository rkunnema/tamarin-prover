theory SOC
begin

functions: rep/2 [private], check_rep/2, get_rep/1
equations: check_rep(rep(m,loc),loc)=m, get_rep(rep(m,loc))=m

builtins: symmetric-encryption, asymmetric-encryption

functions: prog/2, list/2
rule Init_: //Init 
 [ ] --[Init()]-> [State_()]

rule new_init_: //new init 
 [ State_(), Fr(init)] --[]-> [State_1(init)]

rule Par_1: //Par 
 [ State_1(init)] --[]-> [State_11(init), State_12(init)]

rule Rep_0_11: //Rep, 0 
 [ State_11(init)] --[]-> [!Semistate_111(init)]

rule Rep_1_11: //Rep, 1 
 [ !Semistate_111(init)] --[]-> [State_111(init)]

rule in_pkskV_111: //in pk(skV) 
 [ State_111(init), In(pk(skV))] --[]-> [State_1111(init, skV)]

rule Rep_0_1111: //Rep, 0 
 [ State_1111(init, skV)] --[]-> [!Semistate_11111(init, skV)]

rule Rep_1_1111: //Rep, 1 
 [ !Semistate_11111(init, skV)] --[]-> [State_11111(init, skV)]

rule new_shared_k_11111: //new shared_k 
 [ State_11111(init, skV), Fr(shared_k)] --[]-> [State_111111(init, shared_k, skV)]

rule event_SessionPpkskV_shared_k_111111: //event SessionP(pk(skV), shared_k) 
 [ State_111111(init, shared_k, skV)] --[Event(), SessionP(pk(skV), shared_k)]-> [State_1111111(init, shared_k, skV)]

rule event_Poutput_aencshared_k_pkskV_repaencshared_k_pkskV_loc_pkskV___1111111: //event Poutput(<aenc(shared_k, pk(skV)), rep(aenc(shared_k, pk(skV)), <'loc', pk(skV)>)>) 
 [ State_1111111(init, shared_k, skV)] --[Event(), Poutput(<aenc(shared_k, pk(skV)), rep(aenc(shared_k, pk(skV)), <'loc', pk(skV)>)>)]-> [State_11111111(init, shared_k, skV)]

rule out_aencshared_k_pkskV_repaencshared_k_pkskV_loc_pkskV___11111111: //out <aenc(shared_k, pk(skV)), rep(aenc(shared_k, pk(skV)), <'loc', pk(skV)>)> 
 [ State_11111111(init, shared_k, skV)] --[]-> [State_111111111(init, shared_k, skV), Out(<aenc(shared_k, pk(skV)), rep(aenc(shared_k, pk(skV)), <'loc', pk(skV)>)>)]

rule new_storeP_111111111: //new storeP 
 [ State_111111111(init, shared_k, skV), Fr(storeP)] --[]-> [State_1111111111(init, shared_k, skV, storeP)]

rule insert_storeP_init_1111111111: //insert storeP,init 
 [ State_1111111111(init, shared_k, skV, storeP)] --[Insert(storeP, init)]-> [State_11111111111(init, shared_k, skV, storeP)]

rule Rep_0_11111111111: //Rep, 0 
 [ State_11111111111(init, shared_k, skV, storeP)] --[]-> [!Semistate_111111111111(init, shared_k, skV, storeP)]

rule Rep_1_11111111111: //Rep, 1 
 [ !Semistate_111111111111(init, shared_k, skV, storeP)] --[]-> [State_111111111111(init, shared_k, skV, storeP)]

rule lock_storeP_111111111111: //lock storeP 
 [ State_111111111111(init, shared_k, skV, storeP), Fr(~lock8)] --[Lock(~lock8, storeP)]-> [State_1111111111111(~lock8, init, shared_k, skV, storeP)]

rule lookup_storeP_as_old_i_0_1111111111111: //lookup storeP as old_i, 0 
 [ State_1111111111111(~lock8, init, shared_k, skV, storeP)] --[IsIn(storeP, old_i)]-> [State_11111111111111(~lock8, init, old_i, shared_k, skV, storeP)]

rule lookup_storeP_as_old_i_1_1111111111111: //lookup storeP as old_i, 1 
 [ State_1111111111111(~lock8, init, shared_k, skV, storeP)] --[IsNotSet(storeP)]-> [State_11111111111112(~lock8, init, shared_k, skV, storeP)]

rule in_senc_ip_input_shared_k_11111111111111: //in senc(<ip, 'input'>, shared_k) 
 [ State_11111111111111(~lock8, init, old_i, shared_k, skV, storeP), In(senc(<ip, 'input'>, shared_k))] --[]-> [State_111111111111111(~lock8, init, ip, old_i, shared_k, skV, storeP)]

rule event_Poutputsenc_progip_old_i_output_shared_k_111111111111111: //event Poutput(senc(<prog(ip, old_i), 'output'>, shared_k)) 
 [ State_111111111111111(~lock8, init, ip, old_i, shared_k, skV, storeP)] --[Event(), Poutput(senc(<prog(ip, old_i), 'output'>, shared_k))]-> [State_1111111111111111(~lock8, init, ip, old_i, shared_k, skV, storeP)]

rule out_senc_progip_old_i_output_shared_k_1111111111111111: //out senc(<prog(ip, old_i), 'output'>, shared_k) 
 [ State_1111111111111111(~lock8, init, ip, old_i, shared_k, skV, storeP)] --[]-> [State_11111111111111111(~lock8, init, ip, old_i, shared_k, skV, storeP), Out(senc(<prog(ip, old_i), 'output'>, shared_k))]

rule insert_storeP_listip_old_i_11111111111111111: //insert storeP,list(ip, old_i) 
 [ State_11111111111111111(~lock8, init, ip, old_i, shared_k, skV, storeP)] --[Insert(storeP, list(ip, old_i))]-> [State_111111111111111111(~lock8, init, ip, old_i, shared_k, skV, storeP)]

rule unlock_storeP_111111111111111111: //unlock storeP 
 [ State_111111111111111111(~lock8, init, ip, old_i, shared_k, skV, storeP)] --[Unlock(~lock8, storeP)]-> [State_1111111111111111111(~lock8, init, ip, old_i, shared_k, skV, storeP)]

rule Zero_1111111111111111111: //Zero 
 [ State_1111111111111111111(~lock8, init, ip, old_i, shared_k, skV, storeP)] --[]-> []

rule Zero_11111111111112: //Zero 
 [ State_11111111111112(~lock8, init, shared_k, skV, storeP)] --[]-> []

rule Rep_0_12: //Rep, 0 
 [ State_12(init)] --[]-> [!Semistate_121(init)]

rule Rep_1_12: //Rep, 1 
 [ !Semistate_121(init)] --[]-> [State_121(init)]

rule new_skV_121: //new skV 
 [ State_121(init), Fr(skV)] --[]-> [State_1211(init, skV)]

rule event_HonestPpkskV_1211: //event HonestP(pk(skV)) 
 [ State_1211(init, skV)] --[Event(), HonestP(pk(skV))]-> [State_12111(init, skV)]

rule out_pkskV_12111: //out pk(skV) 
 [ State_12111(init, skV)] --[]-> [State_121111(init, skV), Out(pk(skV))]

rule in_aencshared_k_pkskV_signed__121111: //in <aenc(shared_k, pk(skV)), signed> 
 [ State_121111(init, skV), In(<aenc(shared_k, pk(skV)), signed>)] --[]-> [State_1211111(init, shared_k, signed, skV)]

rule if_eqaencshared_k_pkskV_check_repsigned_loc_pkskV__0_1211111: //if eq(aenc(shared_k, pk(skV)), check_rep(signed, <'loc', pk(skV)>)), 0 
 [ State_1211111(init, shared_k, signed, skV)] --[Pred_eq(aenc(shared_k, pk(skV)), check_rep(signed, <'loc', pk(skV)>))]-> [State_12111111(init, shared_k, signed, skV)]

rule if_eqaencshared_k_pkskV_check_repsigned_loc_pkskV__1_1211111: //if eq(aenc(shared_k, pk(skV)), check_rep(signed, <'loc', pk(skV)>)), 1 
 [ State_1211111(init, shared_k, signed, skV)] --[Pred_not_eq(aenc(shared_k, pk(skV)), check_rep(signed, <'loc', pk(skV)>))]-> [State_12111112(init, shared_k, signed, skV)]

rule event_Voutput_aencshared_k_pkskV_signed__12111111: //event Voutput(<aenc(shared_k, pk(skV)), signed>) 
 [ State_12111111(init, shared_k, signed, skV)] --[Event(), Voutput(<aenc(shared_k, pk(skV)), signed>)]-> [State_121111111(init, shared_k, signed, skV)]

rule event_SessionVpkskV_shared_k_121111111: //event SessionV(pk(skV), shared_k) 
 [ State_121111111(init, shared_k, signed, skV)] --[Event(), SessionV(pk(skV), shared_k)]-> [State_1211111111(init, shared_k, signed, skV)]

rule new_storeV_1211111111: //new storeV 
 [ State_1211111111(init, shared_k, signed, skV), Fr(storeV)] --[]-> [State_12111111111(init, shared_k, signed, skV, storeV)]

rule insert_storeV_init_12111111111: //insert storeV,init 
 [ State_12111111111(init, shared_k, signed, skV, storeV)] --[Insert(storeV, init)]-> [State_121111111111(init, shared_k, signed, skV, storeV)]

rule Rep_0_121111111111: //Rep, 0 
 [ State_121111111111(init, shared_k, signed, skV, storeV)] --[]-> [!Semistate_1211111111111(init, shared_k, signed, skV, storeV)]

rule Rep_1_121111111111: //Rep, 1 
 [ !Semistate_1211111111111(init, shared_k, signed, skV, storeV)] --[]-> [State_1211111111111(init, shared_k, signed, skV, storeV)]

rule lock_storeV_1211111111111: //lock storeV 
 [ State_1211111111111(init, shared_k, signed, skV, storeV), Fr(~lock10)] --[Lock(~lock10, storeV)]-> [State_12111111111111(~lock10, init, shared_k, signed, skV, storeV)]

rule lookup_storeV_as_old_i_0_12111111111111: //lookup storeV as old_i, 0 
 [ State_12111111111111(~lock10, init, shared_k, signed, skV, storeV)] --[IsIn(storeV, old_i)]-> [State_121111111111111(~lock10, init, old_i, shared_k, signed, skV, storeV)]

rule lookup_storeV_as_old_i_1_12111111111111: //lookup storeV as old_i, 1 
 [ State_12111111111111(~lock10, init, shared_k, signed, skV, storeV)] --[IsNotSet(storeV)]-> [State_121111111111112(~lock10, init, shared_k, signed, skV, storeV)]

rule new_ip_121111111111111: //new ip 
 [ State_121111111111111(~lock10, init, old_i, shared_k, signed, skV, storeV), Fr(ip)] --[]-> [State_1211111111111111(~lock10, init, ip, old_i, shared_k, signed, skV, storeV)]

rule event_Inputsencip_shared_k_1211111111111111: //event Input(senc(ip, shared_k)) 
 [ State_1211111111111111(~lock10, init, ip, old_i, shared_k, signed, skV, storeV)] --[Event(), Input(senc(ip, shared_k))]-> [State_12111111111111111(~lock10, init, ip, old_i, shared_k, signed, skV, storeV)]

rule out_senc_ip_input_shared_k_12111111111111111: //out senc(<ip, 'input'>, shared_k) 
 [ State_12111111111111111(~lock10, init, ip, old_i, shared_k, signed, skV, storeV)] --[]-> [State_121111111111111111(~lock10, init, ip, old_i, shared_k, signed, skV, storeV), Out(senc(<ip, 'input'>, shared_k))]

rule in_senc_progip_old_i_output_shared_k_121111111111111111: //in senc(<prog(ip, old_i), 'output'>, shared_k) 
 [ State_121111111111111111(~lock10, init, ip, old_i, shared_k, signed, skV, storeV), In(senc(<prog(ip, old_i), 'output'>, shared_k))] --[]-> [State_1211111111111111111(~lock10, init, ip, old_i, shared_k, signed, skV, storeV)]

rule event_Voutputsenc_progip_old_i_output_shared_k_1211111111111111111: //event Voutput(senc(<prog(ip, old_i), 'output'>, shared_k)) 
 [ State_1211111111111111111(~lock10, init, ip, old_i, shared_k, signed, skV, storeV)] --[Event(), Voutput(senc(<prog(ip, old_i), 'output'>, shared_k))]-> [State_12111111111111111111(~lock10, init, ip, old_i, shared_k, signed, skV, storeV)]

rule insert_storeV_listip_old_i_12111111111111111111: //insert storeV,list(ip, old_i) 
 [ State_12111111111111111111(~lock10, init, ip, old_i, shared_k, signed, skV, storeV)] --[Insert(storeV, list(ip, old_i))]-> [State_121111111111111111111(~lock10, init, ip, old_i, shared_k, signed, skV, storeV)]

rule unlock_storeV_121111111111111111111: //unlock storeV 
 [ State_121111111111111111111(~lock10, init, ip, old_i, shared_k, signed, skV, storeV)] --[Unlock(~lock10, storeV)]-> [State_1211111111111111111111(~lock10, init, ip, old_i, shared_k, signed, skV, storeV)]

rule Zero_1211111111111111111111: //Zero 
 [ State_1211111111111111111111(~lock10, init, ip, old_i, shared_k, signed, skV, storeV)] --[]-> []

rule Zero_121111111111112: //Zero 
 [ State_121111111111112(~lock10, init, shared_k, signed, skV, storeV)] --[]-> []

rule Zero_12111112: //Zero 
 [ State_12111112(init, shared_k, signed, skV)] --[]-> []

 restriction set_in:
"All x y #t3 . IsIn(x,y)@t3 ==>
        (Ex #t2 . Insert(x,y)@t2 & #t2<#t3 
                & ( All #t1 . Delete(x)@t1 ==> (#t1<#t2 |  #t3<#t1))
                & ( All #t1 yp . Insert(x,yp)@t1 ==> (#t1<#t2 | #t1=#t2 | #t3<#t1))
)"

restriction set_notin:
"All x #t3 . IsNotSet(x)@t3 ==> 
        (All #t1 y . Insert(x,y)@t1 ==>  #t3<#t1 )
  | ( Ex #t1 .   Delete(x)@t1 & #t1<#t3 
                &  (All #t2 y . Insert(x,y)@t2 & #t2<#t3 ==>  #t2<#t1))"


restriction locking:
"All l x lp #t1 #t3 . Lock(l,x)@t1 & Lock(lp,x)@t3 
        ==> 
        ( #t1<#t3 
                & (Ex #t2. Unlock(l,x)@t2 & #t1<#t2 & #t2<#t3 
                 & (All  #t0 . Unlock(l,x)@t0 ==> #t0=#t2) 
                 & (All lp #t0 . Lock(lp,x)@t0 ==> #t0<#t1 | #t0=#t1 | #t2<#t0) 
                 & (All lp #t0 . Unlock(lp,x)@t0 ==> #t0<#t1 | #t2<#t0 | #t2=#t0 )
                ))
        | #t3<#t1 | #t1=#t3 "


restriction predicate_eq:
"All #i a b. Pred_eq(a,b)@i ==> a = b"


restriction predicate_not_eq:
"All #i a b. Pred_not_eq(a,b)@i ==> not(a = b)"


restriction single_session: // for a single session
    "All #i #j. Init()@i & Init()@j ==> #i=#j"

restriction predicate1:
	"All #i x y. Pred_not_pred_rep(x,y)@i ==> not(not(Ex z . (y = <'loc', z>)))"

restriction predicate0:
	"All #i x y. Pred_pred_rep(x,y)@i ==> not(Ex z . (y = <'loc', z>))"

lemma secrecy [reuse]:
"	not( Ex pka k #t1 #t2. SessionV(pka, k) @ t1 & KU(k) @ t2 )"

lemma Input [use_induction, reuse]:
"	All #t1 ip shared_key. Input(senc(ip, shared_key)) @ t1 ==> ( Ex #t2 pk. SessionV(pk, shared_key) @ t2 & t2 < t1 )"

lemma secrecy_computes2 [reuse]:
"	not( Ex ip k #t2 #t3. Input(senc(ip, k)) @ t2 & KU(ip) @ t3 )"

lemma secrecy_computes3 [reuse]:
"	not( Ex ip k old_i #t2 #t3. Input(senc(ip, k)) @ t2 & KU(prog(ip, old_i)) @ t3 )"

lemma attested_computation :
"	All #t1 h. Voutput(h) @ t1 ==> ( Ex #t2. Poutput(h) @ t2 & t2 < t1 )"

end
