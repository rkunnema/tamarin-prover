theory OPC_UA_Secure_Communication
begin

functions: rep/2 [private], check_rep/2, get_rep/1
equations: check_rep(rep(m,loc),loc)=m, get_rep(rep(m,loc))=m
section{* The OPC UA Secure Conversation protocol *}

builtins: symmetric-encryption, hashing, multiset

functions: mac/2, verifyMac/3, true/0

equations: verifyMac(mac(m, sk), m, sk)=true
rule Init_: //Init 
 [ ] --[Init()]-> [State_()]

rule MessageID_rule_: //MessageID-rule 
 [ Fr(~x)] --[]-> [MID_Sender(~x), MID_Receiver(~x)]

rule Rep_0_: //Rep, 0 
 [ State_()] --[]-> [!Semistate_1()]

rule Rep_1_: //Rep, 1 
 [ Fr(~prog_1), !Semistate_1()] --[ProgressFrom_1(~prog_1)]-> [State_1(~prog_1)]

rule new_a_1: //new a 
 [ State_1(~prog_1), Fr(a)] --[]-> [State_11(~prog_1, a)]

rule new_b_11: //new b 
 [ State_11(~prog_1, a), Fr(b)] --[]-> [State_111(~prog_1, a, b)]

rule new_kSign_111: //new kSign 
 [ State_111(~prog_1, a, b), Fr(kSign)] --[]-> [State_1111(~prog_1, a, b, kSign)]

rule new_kEnc_1111: //new kEnc 
 [ State_1111(~prog_1, a, b, kSign), Fr(kEnc)] --[]-> [State_11111(~prog_1, a, b, kEnc, kSign)]

rule Par_11111: //Par 
 [ State_11111(~prog_1, a, b, kEnc, kSign)] --[ProgressTo_111112(~prog_1), ProgressTo_111111(~prog_1)]-> [State_111111(~prog_1, a, b, kEnc, kSign), State_111112(~prog_1, a, b, kEnc, kSign)]

rule Rep_0_111111: //Rep, 0 
 [ State_111111(~prog_1, a, b, kEnc, kSign)] --[]-> [!Semistate_1111111(~prog_1, a, b, kEnc, kSign)]

rule Rep_1_111111: //Rep, 1 
 [ Fr(~prog_1111111), !Semistate_1111111(~prog_1, a, b, kEnc, kSign)] --[ProgressFrom_1111111(~prog_1111111)]-> [State_1111111(~prog_1, ~prog_1111111, a, b, kEnc, kSign)]

rule lock_a_b__1111111: //lock <a, b> 
 [ State_1111111(~prog_1, ~prog_1111111, a, b, kEnc, kSign), Fr(~lock8)] --[ProgressTo_11111111(~prog_1111111), Lock(~lock8, <a, b>)]-> [State_11111111(~lock8, ~prog_1, ~prog_1111111, a, b, kEnc, kSign)]

rule in_c_seq_11111111: //in 'c',seq 
 [ Fr(~prog_111111111), State_11111111(~lock8, ~prog_1, ~prog_1111111, a, b, kEnc, kSign), In(<'c', seq>)] --[ProgressFrom_111111111(~prog_111111111), ChannelInEvent(<'c', seq>)]-> [State_111111111(~lock8, ~prog_1, ~prog_1111111, ~prog_111111111, a, b, kEnc, kSign, seq)]

rule event_Seq_Senta_b_seq_111111111: //event Seq_Sent(a, b, seq) 
 [ State_111111111(~lock8, ~prog_1, ~prog_1111111, ~prog_111111111, a, b, kEnc, kSign, seq)] --[Event(), Seq_Sent(a, b, seq)]-> [State_1111111111(~lock8, ~prog_1, ~prog_1111111, ~prog_111111111, a, b, kEnc, kSign, seq)]

rule new_m_1111111111: //new m 
 [ State_1111111111(~lock8, ~prog_1, ~prog_1111111, ~prog_111111111, a, b, kEnc, kSign, seq), Fr(m)] --[]-> [State_11111111111(~lock8, ~prog_1, ~prog_1111111, ~prog_111111111, a, b, kEnc, kSign, m, seq)]

rule event_Senta_b_m_11111111111: //event Sent(a, b, m) 
 [ State_11111111111(~lock8, ~prog_1, ~prog_1111111, ~prog_111111111, a, b, kEnc, kSign, m, seq)] --[Event(), Sent(a, b, m)]-> [State_111111111111(~lock8, ~prog_1, ~prog_1111111, ~prog_111111111, a, b, kEnc, kSign, m, seq)]

rule out_r_MH_SH_senc_seq_m_pad_mac_MH_SH_seq_m_pad_kSign_kEnc__111111111111: //out 'r',<$MH, $SH, senc(<seq, m, $pad, mac(<$MH, $SH, seq, m, $pad>, kSign)>, kEnc)> 
 [ MID_Sender(mid_111111111111), State_111111111111(~lock8, ~prog_1, ~prog_1111111, ~prog_111111111, a, b, kEnc, kSign, m, seq)] --[Send(mid_111111111111,<$MH, $SH, senc(<seq, m, $pad, mac(<$MH, $SH, seq, m, $pad>, kSign)>, kEnc)>)]-> [Out(<$MH, $SH, senc(<seq, m, $pad, mac(<$MH, $SH, seq, m, $pad>, kSign)>, kEnc)>), State_1111111111111(~lock8, ~prog_1, ~prog_1111111, ~prog_111111111, a, b, kEnc, kSign, m, seq)]

rule unlock_a_b__1111111111111: //unlock <a, b> 
 [ State_1111111111111(~lock8, ~prog_1, ~prog_1111111, ~prog_111111111, a, b, kEnc, kSign, m, seq)] --[ProgressTo_11111111111111(~prog_111111111), Unlock(~lock8, <a, b>)]-> [State_11111111111111(~lock8, ~prog_1, ~prog_1111111, ~prog_111111111, a, b, kEnc, kSign, m, seq)]

rule Zero_11111111111111: //Zero 
 [ State_11111111111111(~lock8, ~prog_1, ~prog_1111111, ~prog_111111111, a, b, kEnc, kSign, m, seq)] --[]-> []

rule Rep_0_111112: //Rep, 0 
 [ State_111112(~prog_1, a, b, kEnc, kSign)] --[]-> [!Semistate_1111121(~prog_1, a, b, kEnc, kSign)]

rule Rep_1_111112: //Rep, 1 
 [ Fr(~prog_1111121), !Semistate_1111121(~prog_1, a, b, kEnc, kSign)] --[ProgressFrom_1111121(~prog_1111121)]-> [State_1111121(~prog_1, ~prog_1111121, a, b, kEnc, kSign)]

rule lock_b_a__1111121: //lock <b, a> 
 [ State_1111121(~prog_1, ~prog_1111121, a, b, kEnc, kSign), Fr(~lock6)] --[ProgressTo_11111211(~prog_1111121), Lock(~lock6, <b, a>)]-> [State_11111211(~lock6, ~prog_1, ~prog_1111121, a, b, kEnc, kSign)]

rule in_r_MH_SH_senc_seq_m_pad_mac_MH_SH_seq_m_pad_kSign_kEnc__11111211: //in 'r',<MH, SH, senc(<seq, m, pad, mac(<MH, SH, seq, m, pad>, kSign)>, kEnc)> 
 [ Fr(~prog_111112111), State_11111211(~lock6, ~prog_1, ~prog_1111121, a, b, kEnc, kSign), In(<MH, SH, senc(<seq, m, pad, mac(<MH, SH, seq, m, pad>, kSign)>, kEnc)>), MID_Receiver(mid_11111211)] --[ProgressFrom_111112111(~prog_111112111), Receive(mid_11111211,<MH, SH, senc(<seq, m, pad, mac(<MH, SH, seq, m, pad>, kSign)>, kEnc)>)]-> [State_111112111(~lock6, ~prog_1, ~prog_1111121, ~prog_111112111, MH, SH, a, b, kEnc, kSign, m, pad, seq)]

rule event_Seq_Recva_b_seq_111112111: //event Seq_Recv(a, b, seq) 
 [ State_111112111(~lock6, ~prog_1, ~prog_1111121, ~prog_111112111, MH, SH, a, b, kEnc, kSign, m, pad, seq)] --[Event(), Seq_Recv(a, b, seq)]-> [State_1111121111(~lock6, ~prog_1, ~prog_1111121, ~prog_111112111, MH, SH, a, b, kEnc, kSign, m, pad, seq)]

rule event_Recva_b_m_1111121111: //event Recv(a, b, m) 
 [ State_1111121111(~lock6, ~prog_1, ~prog_1111121, ~prog_111112111, MH, SH, a, b, kEnc, kSign, m, pad, seq)] --[Event(), Recv(a, b, m)]-> [State_11111211111(~lock6, ~prog_1, ~prog_1111121, ~prog_111112111, MH, SH, a, b, kEnc, kSign, m, pad, seq)]

rule unlock_b_a__11111211111: //unlock <b, a> 
 [ State_11111211111(~lock6, ~prog_1, ~prog_1111121, ~prog_111112111, MH, SH, a, b, kEnc, kSign, m, pad, seq)] --[ProgressTo_111112111111(~prog_111112111), Unlock(~lock6, <b, a>)]-> [State_111112111111(~lock6, ~prog_1, ~prog_1111121, ~prog_111112111, MH, SH, a, b, kEnc, kSign, m, pad, seq)]

rule Zero_111112111111: //Zero 
 [ State_111112111111(~lock6, ~prog_1, ~prog_1111121, ~prog_111112111, MH, SH, a, b, kEnc, kSign, m, pad, seq)] --[]-> []

restriction A_Counter_Increases :
"	All A B seq1 seq2 #i #j. ( Seq_Sent(A, B, seq1) @ #i & Seq_Sent(A, B, seq2) @ #j & #i < #j ==> Ex dif. seq2 = (seq1) + (dif) )"

restriction A_Counter_No_Reuse :
"	All A B seq #i #j. ( Seq_Sent(A, B, seq) @ #i & Seq_Sent(A, B, seq) @ #j ==> #i = #j )"

restriction B_Counter_Counter_Increases :
"	All A B seq1 seq2 #i #j. ( Seq_Recv(A, B, seq1) @ #i & Seq_Recv(A, B, seq2) @ #j & #i < #j ==> Ex dif. seq2 = (seq1) + (dif) )"

restriction B_Counter_No_Reuse :
"	All A B seq #i #j. ( Seq_Recv(A, B, seq) @ #i & Seq_Recv(A, B, seq) @ #j ==> #i = #j )"


restriction locking:
"All l x lp #t1 #t3 . Lock(l,x)@t1 & Lock(lp,x)@t3 
        ==> 
        ( #t1<#t3 
                & (Ex #t2. Unlock(l,x)@t2 & #t1<#t2 & #t2<#t3 
                 & (All  #t0 . Unlock(l,x)@t0 ==> #t0=#t2) 
                 & (All lp #t0 . Lock(lp,x)@t0 ==> #t0<#t1 | #t0=#t1 | #t2<#t0) 
                 & (All lp #t0 . Unlock(lp,x)@t0 ==> #t0<#t1 | #t2<#t0 | #t2=#t0 )
                ))
        | #t3<#t1 | #t1=#t3 "


restriction single_session: // for a single session
    "All #i #j. Init()@i & Init()@j ==> #i=#j"


restriction progress_1111121_to_11111211:
    "All p #t1. ProgressFrom_1111121(p )@t1 ==> 
       (Ex #t2. ProgressTo_11111211(p )@t2)
    "

restriction progress_111112111_to_111112111111:
    "All p #t1. ProgressFrom_111112111(p )@t1 ==> 
       (Ex #t2. ProgressTo_111112111111(p )@t2)
    "

restriction progress_111111111_to_11111111111111:
    "All p #t1. ProgressFrom_111111111(p )@t1 ==> 
       (Ex #t2. ProgressTo_11111111111111(p )@t2)
    "

restriction progress_1111111_to_11111111:
    "All p #t1. ProgressFrom_1111111(p )@t1 ==> 
       (Ex #t2. ProgressTo_11111111(p )@t2)
    "

restriction progress_1_to_111112:
    "All p #t1. ProgressFrom_1(p )@t1 ==> 
       (Ex #t2. ProgressTo_111112(p )@t2)
    "

restriction progress_1_to_111111:
    "All p #t1. ProgressFrom_1(p )@t1 ==> 
       (Ex #t2. ProgressTo_111111(p )@t2)
    "


restriction progress_init:
    " Ex #t. Init()@t "

restriction resilient: 
    "All #i x y. Send(x,y)@i ==> Ex #j. Receive(x,y)@j & #i<#j "

lemma Executable : exists-trace
"	Ex A B m #i. Recv(A, B, m) @ #i"

lemma all_received_were_sent : all-traces
"	All A B m #i. ( Recv(A, B, m) @ #i ==> ( Ex #k. ( Sent(A, B, m) @ #k & #k < #i ) ) )"

lemma all_received_were_sent_injective :
"	All A B t #i. Recv(A, B, t) @ #i ==> ( Ex #j. Sent(A, B, t) @ #j & #j < #i & not( Ex A2 B2 #i2. Recv(A2, B2, t) @ i2 & not( #i2 = #i ) ) )"

lemma order : all-traces
"	All A B m m2 #i #j. ( Recv(A, B, m) @ #i & Recv(A, B, m2) @ #j & #i < #j ==> ( Ex #k #l. ( Sent(A, B, m) @ #k & Sent(A, B, m2) @ #l & #k < #l ) ) )"

lemma delivery : all-traces
"	All A B m #i. ( Sent(A, B, m) @ #i ==> ( Ex #k. ( Recv(A, B, m) @ #k & #i < #k ) ) )"

lemma delivery_order : all-traces
"	All A B m m2 #i #j. ( Sent(A, B, m) @ #i & Sent(A, B, m2) @ #j & #i < #j ==> ( Ex #k #l. ( Recv(A, B, m) @ #k & Recv(A, B, m2) @ #l & #k < #l ) ) )"

end
