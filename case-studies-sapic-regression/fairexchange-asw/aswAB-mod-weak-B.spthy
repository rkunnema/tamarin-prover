theory ASWmod
begin

functions: rep/2 [private], check_rep/2, get_rep/1
equations: check_rep(rep(m,loc),loc)=m, get_rep(rep(m,loc))=m
section{* The ASW contract signing protocol *}

builtins: hashing

functions: pk/1, sk/1[private], sign/2, verify/2, extrmsg/1, true/0

equations: verify(sign(m, sk(i)), pk(i))=true,extrmsg(sign(m, x))=m
rule Init_: //Init 
 [ Fr(~prog_)] --[Init(), ProgressFrom_(~prog_)]-> [State_(~prog_)]

rule MessageID_rule_: //MessageID-rule 
 [ Fr(~x)] --[]-> [MID_Sender(~x), MID_Receiver(~x)]

rule Par_: //Par 
 [ State_(~prog_)] --[ProgressTo_2(~prog_), ProgressTo_1(~prog_)]-> [State_1(~prog_), State_2(~prog_)]

rule Rep_0_1: //Rep, 0 
 [ State_1(~prog_)] --[]-> [!Semistate_11(~prog_)]

rule Rep_1_1: //Rep, 1 
 [ !Semistate_11(~prog_)] --[]-> [State_11(~prog_)]

rule in_c_A_B_TTPID__11: //in 'c',<$A, $B, TTPID> 
 [ Fr(~prog_111), State_11(~prog_), In(<'c', <$A, $B, TTPID>>)] --[ProgressFrom_111(~prog_111), ChannelInEvent(<'c', <$A, $B, TTPID>>)]-> [State_111($A, $B, ~prog_, ~prog_111, TTPID)]

rule Par_111: //Par 
 [ State_111($A, $B, ~prog_, ~prog_111, TTPID)] --[]-> [State_1111($A, $B, ~prog_, ~prog_111, TTPID), State_1112($A, $B, ~prog_, ~prog_111, TTPID)]

rule Par_1111: //Par 
 [ State_1111($A, $B, ~prog_, ~prog_111, TTPID)] --[]-> [State_11111($A, $B, ~prog_, ~prog_111, TTPID), State_11112($A, $B, ~prog_, ~prog_111, TTPID)]

rule Par_11111: //Par 
 [ State_11111($A, $B, ~prog_, ~prog_111, TTPID)] --[ProgressTo_111112(~prog_111), ProgressTo_111111(~prog_111)]-> [State_111111($A, $B, ~prog_, ~prog_111, TTPID), State_111112($A, $B, ~prog_, ~prog_111, TTPID)]

rule in_c_TEXT_111111: //in 'c',$TEXT 
 [ Fr(~prog_1111111), State_111111($A, $B, ~prog_, ~prog_111, TTPID), In(<'c', $TEXT>)] --[ProgressFrom_1111111(~prog_1111111), ChannelInEvent(<'c', $TEXT>)]-> [State_1111111($A, $B, $TEXT, ~prog_, ~prog_111, ~prog_1111111, TTPID)]

rule new_na_1111111: //new na 
 [ State_1111111($A, $B, $TEXT, ~prog_, ~prog_111, ~prog_1111111, TTPID), Fr(na)] --[]-> [State_11111111($A, $B, $TEXT, ~prog_, ~prog_111, ~prog_1111111, TTPID, na)]

rule event_StartA_A_B_TEXT_na_11111111: //event StartA($A, $B, $TEXT, na) 
 [ State_11111111($A, $B, $TEXT, ~prog_, ~prog_111, ~prog_1111111, TTPID, na)] --[Event(), StartA($A, $B, $TEXT, na)]-> [State_111111111($A, $B, $TEXT, ~prog_, ~prog_111, ~prog_1111111, TTPID, na)]

rule event_StartAm1sign_A_B_TTPID_TEXT_hna_sk_A_111111111: //event StartAm1(sign(<$A, $B, TTPID, $TEXT, h(na)>, sk($A))) 
 [ State_111111111($A, $B, $TEXT, ~prog_, ~prog_111, ~prog_1111111, TTPID, na)] --[Event(), StartAm1(sign(<$A, $B, TTPID, $TEXT, h(na)>, sk($A)))]-> [State_1111111111($A, $B, $TEXT, ~prog_, ~prog_111, ~prog_1111111, TTPID, na)]

rule out_c_sign_A_B_TTPID_TEXT_hna_sk_A_1111111111: //out 'c',sign(<$A, $B, TTPID, $TEXT, h(na)>, sk($A)) 
 [ State_1111111111($A, $B, $TEXT, ~prog_, ~prog_111, ~prog_1111111, TTPID, na), In('c')] --[ChannelInEvent('c')]-> [State_11111111111($A, $B, $TEXT, ~prog_, ~prog_111, ~prog_1111111, TTPID, na), Out(sign(<$A, $B, TTPID, $TEXT, h(na)>, sk($A)))]

rule in_c_m2_111111111111: //in 'c',m2 
 [ State_11111111111($A, $B, $TEXT, ~prog_, ~prog_111, ~prog_1111111, TTPID, na), In(<'c', m2>)] --[ChannelInEvent(<'c', m2>)]-> [State_1111111111111($A, $B, $TEXT, ~prog_, ~prog_111, ~prog_1111111, TTPID, m2, na)]

rule out_c_sign_na_hnb_sk_A_1111111111111: //out 'c',sign(<na, h(nb)>, sk($A)) 
 [ State_1111111111111($A, $B, $TEXT, ~prog_, ~prog_111, ~prog_1111111, TTPID, m2, na), In('c')] --[ChannelInEvent('c')]-> [State_11111111111111($A, $B, $TEXT, ~prog_, ~prog_111, ~prog_1111111, TTPID, m2, na, nb), Out(sign(<na, h(nb)>, sk($A)))]

rule in_c_m4_111111111111111: //in 'c',m4 
 [ State_11111111111111($A, $B, $TEXT, ~prog_, ~prog_111, ~prog_1111111, TTPID, m2, na, nb), In(<'c', m4>)] --[ChannelInEvent(<'c', m4>)]-> [State_1111111111111111($A, $B, $TEXT, ~prog_, ~prog_111, ~prog_1111111, TTPID, m2, m4, na, nb)]

rule event_ContractA_A_B_TEXT_na_1111111111111111: //event ContractA($A, $B, $TEXT, na) 
 [ State_1111111111111111($A, $B, $TEXT, ~prog_, ~prog_111, ~prog_1111111, TTPID, m2, m4, na, nb)] --[Event(), ContractA($A, $B, $TEXT, na)]-> [State_11111111111111111($A, $B, $TEXT, ~prog_, ~prog_111, ~prog_1111111, TTPID, m2, m4, na, nb)]

rule event_EndA1_A_B_TEXT_nb_11111111111111111: //event EndA1($A, $B, $TEXT, nb) 
 [ State_11111111111111111($A, $B, $TEXT, ~prog_, ~prog_111, ~prog_1111111, TTPID, m2, m4, na, nb)] --[ProgressTo_111111111111111111(~prog_1111111), Event(), EndA1($A, $B, $TEXT, nb)]-> [State_111111111111111111($A, $B, $TEXT, ~prog_, ~prog_111, ~prog_1111111, TTPID, m2, m4, na, nb)]

rule Zero_111111111111111111: //Zero 
 [ State_111111111111111111($A, $B, $TEXT, ~prog_, ~prog_111, ~prog_1111111, TTPID, m2, m4, na, nb)] --[]-> []

rule out_r_originator_A_TTPID_sign_A_B_TTPID_TEXT_hna_sk_A_m2__111111111111112: //out 'r',<'originator', $A, TTPID, <sign(<$A, $B, TTPID, $TEXT, h(na)>, sk($A)), m2>> 
 [ MID_Sender(mid_111111111111112), State_11111111111111($A, $B, $TEXT, ~prog_, ~prog_111, ~prog_1111111, TTPID, m2, na, nb)] --[ProgressTo_1111111111111121(~prog_1111111), Send(mid_111111111111112,<'originator', $A, TTPID, <sign(<$A, $B, TTPID, $TEXT, h(na)>, sk($A)), m2>>)]-> [Out(<'originator', $A, TTPID, <sign(<$A, $B, TTPID, $TEXT, h(na)>, sk($A)), m2>>), State_1111111111111121($A, $B, $TEXT, ~prog_, ~prog_111, ~prog_1111111, TTPID, m2, na, nb)]

rule in_r_originator_TTPID_A_sign_m1_m2_skTTPID__1111111111111121: //in 'r',<'originator', TTPID, $A, sign(<m1, m2>, sk(TTPID))> 
 [ Fr(~prog_11111111111111211), State_1111111111111121($A, $B, $TEXT, ~prog_, ~prog_111, ~prog_1111111, TTPID, m2, na, nb), In(<'originator', TTPID, $A, sign(<m1, m2>, sk(TTPID))>), MID_Receiver(mid_1111111111111121)] --[ProgressFrom_11111111111111211(~prog_11111111111111211), Receive(mid_1111111111111121,<'originator', TTPID, $A, sign(<m1, m2>, sk(TTPID))>)]-> [State_11111111111111211($A, $B, $TEXT, ~prog_, ~prog_111, ~prog_1111111, ~prog_11111111111111211, TTPID, m1, m2, na, nb)]

rule event_ContractA_A_B_TEXT_na_11111111111111211: //event ContractA($A, $B, $TEXT, na) 
 [ State_11111111111111211($A, $B, $TEXT, ~prog_, ~prog_111, ~prog_1111111, ~prog_11111111111111211, TTPID, m1, m2, na, nb)] --[Event(), ContractA($A, $B, $TEXT, na)]-> [State_111111111111112111($A, $B, $TEXT, ~prog_, ~prog_111, ~prog_1111111, ~prog_11111111111111211, TTPID, m1, m2, na, nb)]

rule event_EndA2_A_B_TEXT_nb_111111111111112111: //event EndA2($A, $B, $TEXT, nb) 
 [ State_111111111111112111($A, $B, $TEXT, ~prog_, ~prog_111, ~prog_1111111, ~prog_11111111111111211, TTPID, m1, m2, na, nb)] --[ProgressTo_1111111111111121111(~prog_11111111111111211), Event(), EndA2($A, $B, $TEXT, nb)]-> [State_1111111111111121111($A, $B, $TEXT, ~prog_, ~prog_111, ~prog_1111111, ~prog_11111111111111211, TTPID, m1, m2, na, nb)]

rule Zero_1111111111111121111: //Zero 
 [ State_1111111111111121111($A, $B, $TEXT, ~prog_, ~prog_111, ~prog_1111111, ~prog_11111111111111211, TTPID, m1, m2, na, nb)] --[]-> []

rule out_r_originator_A_TTPID_sign_Abort_sign_A_B_TTPID_TEXT_hna_sk_A_sk_A__111111111112: //out 'r',<'originator', $A, TTPID, sign(<'Abort', sign(<$A, $B, TTPID, $TEXT, h(na)>, sk($A))>, sk($A))> 
 [ MID_Sender(mid_111111111112), State_11111111111($A, $B, $TEXT, ~prog_, ~prog_111, ~prog_1111111, TTPID, na)] --[ProgressTo_1111111111121(~prog_1111111), Send(mid_111111111112,<'originator', $A, TTPID, sign(<'Abort', sign(<$A, $B, TTPID, $TEXT, h(na)>, sk($A))>, sk($A))>)]-> [Out(<'originator', $A, TTPID, sign(<'Abort', sign(<$A, $B, TTPID, $TEXT, h(na)>, sk($A))>, sk($A))>), State_1111111111121($A, $B, $TEXT, ~prog_, ~prog_111, ~prog_1111111, TTPID, na)]

rule in_r_originator_TTPID_A_sign_Aborted_a1_skTTPID__11111111111211: //in 'r',<'originator', TTPID, $A, sign(<'Aborted', a1>, sk(TTPID))> 
 [ Fr(~prog_111111111112111), State_1111111111121($A, $B, $TEXT, ~prog_, ~prog_111, ~prog_1111111, TTPID, na), In(<'originator', TTPID, $A, sign(<'Aborted', a1>, sk(TTPID))>), MID_Receiver(mid_11111111111211)] --[ProgressFrom_111111111112111(~prog_111111111112111), Receive(mid_11111111111211,<'originator', TTPID, $A, sign(<'Aborted', a1>, sk(TTPID))>)]-> [State_111111111112111($A, $B, $TEXT, ~prog_, ~prog_111, ~prog_1111111, ~prog_111111111112111, TTPID, a1, na)]

rule event_AbortA_A_B_TEXT_na_111111111112111: //event AbortA($A, $B, $TEXT, na) 
 [ State_111111111112111($A, $B, $TEXT, ~prog_, ~prog_111, ~prog_1111111, ~prog_111111111112111, TTPID, a1, na)] --[Event(), AbortA($A, $B, $TEXT, na)]-> [State_1111111111121111($A, $B, $TEXT, ~prog_, ~prog_111, ~prog_1111111, ~prog_111111111112111, TTPID, a1, na)]

rule event_EndA3_A_B_TEXT_nb_1111111111121111: //event EndA3($A, $B, $TEXT, nb) 
 [ State_1111111111121111($A, $B, $TEXT, ~prog_, ~prog_111, ~prog_1111111, ~prog_111111111112111, TTPID, a1, na)] --[ProgressTo_11111111111211111(~prog_111111111112111), Event(), EndA3($A, $B, $TEXT, nb)]-> [State_11111111111211111($A, $B, $TEXT, ~prog_, ~prog_111, ~prog_1111111, ~prog_111111111112111, TTPID, a1, na)]

rule Zero_11111111111211111: //Zero 
 [ State_11111111111211111($A, $B, $TEXT, ~prog_, ~prog_111, ~prog_1111111, ~prog_111111111112111, TTPID, a1, na)] --[]-> []

rule in_r_originator_TTPID_A_sign_m1_m2_skTTPID__11111111111212: //in 'r',<'originator', TTPID, $A, sign(<m1, m2>, sk(TTPID))> 
 [ Fr(~prog_111111111112121), State_1111111111121($A, $B, $TEXT, ~prog_, ~prog_111, ~prog_1111111, TTPID, na), In(<'originator', TTPID, $A, sign(<m1, m2>, sk(TTPID))>), MID_Receiver(mid_11111111111212)] --[ProgressFrom_111111111112121(~prog_111111111112121), Receive(mid_11111111111212,<'originator', TTPID, $A, sign(<m1, m2>, sk(TTPID))>)]-> [State_111111111112121($A, $B, $TEXT, ~prog_, ~prog_111, ~prog_1111111, ~prog_111111111112121, TTPID, m1, m2, na)]

rule event_ContractA_A_B_TEXT_na_111111111112121: //event ContractA($A, $B, $TEXT, na) 
 [ State_111111111112121($A, $B, $TEXT, ~prog_, ~prog_111, ~prog_1111111, ~prog_111111111112121, TTPID, m1, m2, na)] --[Event(), ContractA($A, $B, $TEXT, na)]-> [State_1111111111121211($A, $B, $TEXT, ~prog_, ~prog_111, ~prog_1111111, ~prog_111111111112121, TTPID, m1, m2, na)]

rule event_EndA4_A_B_TEXT_nb_1111111111121211: //event EndA4($A, $B, $TEXT, nb) 
 [ State_1111111111121211($A, $B, $TEXT, ~prog_, ~prog_111, ~prog_1111111, ~prog_111111111112121, TTPID, m1, m2, na)] --[ProgressTo_11111111111212111(~prog_111111111112121), Event(), EndA4($A, $B, $TEXT, nb)]-> [State_11111111111212111($A, $B, $TEXT, ~prog_, ~prog_111, ~prog_1111111, ~prog_111111111112121, TTPID, m1, m2, na)]

rule Zero_11111111111212111: //Zero 
 [ State_11111111111212111($A, $B, $TEXT, ~prog_, ~prog_111, ~prog_1111111, ~prog_111111111112121, TTPID, m1, m2, na)] --[]-> []

rule in_c_m1_111112: //in 'c',m1 
 [ Fr(~prog_1111121), State_111112($A, $B, ~prog_, ~prog_111, TTPID), In(<'c', m1>)] --[ProgressFrom_1111121(~prog_1111121), ChannelInEvent(<'c', m1>)]-> [State_1111121($A, $B, ~prog_, ~prog_111, ~prog_1111121, TTPID, m1)]

rule new_nb_1111121: //new nb 
 [ State_1111121($A, $B, ~prog_, ~prog_111, ~prog_1111121, TTPID, m1), Fr(nb)] --[]-> [State_11111211($A, $B, ~prog_, ~prog_111, ~prog_1111121, TTPID, m1, nb)]

rule event_StartB_A_B_TEXT_nb_11111211: //event StartB($A, $B, $TEXT, nb) 
 [ State_11111211($A, $B, ~prog_, ~prog_111, ~prog_1111121, TTPID, m1, nb)] --[Event(), StartB($A, $B, $TEXT, nb)]-> [State_111112111($A, $B, ~prog_, ~prog_111, ~prog_1111121, TTPID, m1, nb)]

rule out_c_sign_hm1_hnb_sk_B_111112111: //out 'c',sign(<h(m1), h(nb)>, sk($B)) 
 [ State_111112111($A, $B, ~prog_, ~prog_111, ~prog_1111121, TTPID, m1, nb), In('c')] --[ChannelInEvent('c')]-> [State_1111121111($A, $B, ~prog_, ~prog_111, ~prog_1111121, TTPID, m1, nb), Out(sign(<h(m1), h(nb)>, sk($B)))]

rule in_c_m3_11111211111: //in 'c',m3 
 [ State_1111121111($A, $B, ~prog_, ~prog_111, ~prog_1111121, TTPID, m1, nb), In(<'c', m3>)] --[ChannelInEvent(<'c', m3>)]-> [State_111112111111($A, $B, ~prog_, ~prog_111, ~prog_1111121, TTPID, m1, m3, nb)]

rule event_ContractB_A_B_TEXT_nb_111112111111: //event ContractB($A, $B, $TEXT, nb) 
 [ State_111112111111($A, $B, ~prog_, ~prog_111, ~prog_1111121, TTPID, m1, m3, nb)] --[Event(), ContractB($A, $B, $TEXT, nb)]-> [State_1111121111111($A, $B, ~prog_, ~prog_111, ~prog_1111121, TTPID, m1, m3, nb)]

rule event_EndB1_A_B_TEXT_nb_1111121111111: //event EndB1($A, $B, $TEXT, nb) 
 [ State_1111121111111($A, $B, ~prog_, ~prog_111, ~prog_1111121, TTPID, m1, m3, nb)] --[Event(), EndB1($A, $B, $TEXT, nb)]-> [State_11111211111111($A, $B, ~prog_, ~prog_111, ~prog_1111121, TTPID, m1, m3, nb)]

rule out_c_sign_nb_hna_sk_B_11111211111111: //out 'c',sign(<nb, h(na)>, sk($B)) 
 [ State_11111211111111($A, $B, ~prog_, ~prog_111, ~prog_1111121, TTPID, m1, m3, nb), In('c')] --[ProgressTo_111112111111111(~prog_1111121), ChannelInEvent('c')]-> [State_111112111111111($A, $B, ~prog_, ~prog_111, ~prog_1111121, TTPID, m1, m3, na, nb), Out(sign(<nb, h(na)>, sk($B)))]

rule Zero_111112111111111: //Zero 
 [ State_111112111111111($A, $B, ~prog_, ~prog_111, ~prog_1111121, TTPID, m1, m3, na, nb)] --[]-> []

rule out_r_responder_B_TTPID_m1_sign_hm1_hnb_sk_B__11111211112: //out 'r',<'responder', $B, TTPID, <m1, sign(<h(m1), h(nb)>, sk($B))>> 
 [ MID_Sender(mid_11111211112), State_1111121111($A, $B, ~prog_, ~prog_111, ~prog_1111121, TTPID, m1, nb)] --[ProgressTo_111112111121(~prog_1111121), Send(mid_11111211112,<'responder', $B, TTPID, <m1, sign(<h(m1), h(nb)>, sk($B))>>)]-> [Out(<'responder', $B, TTPID, <m1, sign(<h(m1), h(nb)>, sk($B))>>), State_111112111121($A, $B, ~prog_, ~prog_111, ~prog_1111121, TTPID, m1, nb)]

rule in_r_responder_TTPID_B_sign_Aborted_a1_hnb_skTTPID__1111121111211: //in 'r',<'responder', TTPID, $B, sign(<'Aborted', a1, h(nb)>, sk(TTPID))> 
 [ Fr(~prog_11111211112111), State_111112111121($A, $B, ~prog_, ~prog_111, ~prog_1111121, TTPID, m1, nb), In(<'responder', TTPID, $B, sign(<'Aborted', a1, h(nb)>, sk(TTPID))>), MID_Receiver(mid_1111121111211)] --[ProgressFrom_11111211112111(~prog_11111211112111), Receive(mid_1111121111211,<'responder', TTPID, $B, sign(<'Aborted', a1, h(nb)>, sk(TTPID))>)]-> [State_11111211112111($A, $B, ~prog_, ~prog_111, ~prog_1111121, ~prog_11111211112111, TTPID, a1, m1, nb)]

rule event_AbortB0TTPID_A_B_TEXT_na_nb_11111211112111: //event AbortB0(TTPID, $A, $B, $TEXT, na, nb) 
 [ State_11111211112111($A, $B, ~prog_, ~prog_111, ~prog_1111121, ~prog_11111211112111, TTPID, a1, m1, nb)] --[Event(), AbortB0(TTPID, $A, $B, $TEXT, na, nb)]-> [State_111112111121111($A, $B, ~prog_, ~prog_111, ~prog_1111121, ~prog_11111211112111, TTPID, a1, m1, nb)]

rule event_AbortB_A_B_TEXT_nb_111112111121111: //event AbortB($A, $B, $TEXT, nb) 
 [ State_111112111121111($A, $B, ~prog_, ~prog_111, ~prog_1111121, ~prog_11111211112111, TTPID, a1, m1, nb)] --[Event(), AbortB($A, $B, $TEXT, nb)]-> [State_1111121111211111($A, $B, ~prog_, ~prog_111, ~prog_1111121, ~prog_11111211112111, TTPID, a1, m1, nb)]

rule event_EndB2_A_B_TEXT_nb_1111121111211111: //event EndB2($A, $B, $TEXT, nb) 
 [ State_1111121111211111($A, $B, ~prog_, ~prog_111, ~prog_1111121, ~prog_11111211112111, TTPID, a1, m1, nb)] --[ProgressTo_11111211112111111(~prog_11111211112111), Event(), EndB2($A, $B, $TEXT, nb)]-> [State_11111211112111111($A, $B, ~prog_, ~prog_111, ~prog_1111121, ~prog_11111211112111, TTPID, a1, m1, nb)]

rule Zero_11111211112111111: //Zero 
 [ State_11111211112111111($A, $B, ~prog_, ~prog_111, ~prog_1111121, ~prog_11111211112111, TTPID, a1, m1, nb)] --[]-> []

rule in_r_responder_TTPID_B_sign_m1_m2_skTTPID__1111121111212: //in 'r',<'responder', TTPID, $B, sign(<m1, m2>, sk(TTPID))> 
 [ Fr(~prog_11111211112121), State_111112111121($A, $B, ~prog_, ~prog_111, ~prog_1111121, TTPID, m1, nb), In(<'responder', TTPID, $B, sign(<m1, m2>, sk(TTPID))>), MID_Receiver(mid_1111121111212)] --[ProgressFrom_11111211112121(~prog_11111211112121), Receive(mid_1111121111212,<'responder', TTPID, $B, sign(<m1, m2>, sk(TTPID))>)]-> [State_11111211112121($A, $B, ~prog_, ~prog_111, ~prog_1111121, ~prog_11111211112121, TTPID, m1, m2, nb)]

rule event_ContractB_A_B_TEXT_nb_11111211112121: //event ContractB($A, $B, $TEXT, nb) 
 [ State_11111211112121($A, $B, ~prog_, ~prog_111, ~prog_1111121, ~prog_11111211112121, TTPID, m1, m2, nb)] --[Event(), ContractB($A, $B, $TEXT, nb)]-> [State_111112111121211($A, $B, ~prog_, ~prog_111, ~prog_1111121, ~prog_11111211112121, TTPID, m1, m2, nb)]

rule event_EndB3_A_B_TEXT_nb_111112111121211: //event EndB3($A, $B, $TEXT, nb) 
 [ State_111112111121211($A, $B, ~prog_, ~prog_111, ~prog_1111121, ~prog_11111211112121, TTPID, m1, m2, nb)] --[ProgressTo_1111121111212111(~prog_11111211112121), Event(), EndB3($A, $B, $TEXT, nb)]-> [State_1111121111212111($A, $B, ~prog_, ~prog_111, ~prog_1111121, ~prog_11111211112121, TTPID, m1, m2, nb)]

rule Zero_1111121111212111: //Zero 
 [ State_1111121111212111($A, $B, ~prog_, ~prog_111, ~prog_1111121, ~prog_11111211112121, TTPID, m1, m2, nb)] --[]-> []

rule Par_11112: //Par 
 [ State_11112($A, $B, ~prog_, ~prog_111, TTPID)] --[ProgressTo_111122(~prog_111)]-> [State_111121($A, $B, ~prog_, ~prog_111, TTPID), State_111122($A, $B, ~prog_, ~prog_111, TTPID)]

rule Par_111121: //Par 
 [ State_111121($A, $B, ~prog_, ~prog_111, TTPID)] --[ProgressTo_1111212(~prog_111), ProgressTo_1111211(~prog_111)]-> [State_1111211($A, $B, ~prog_, ~prog_111, TTPID), State_1111212($A, $B, ~prog_, ~prog_111, TTPID)]

rule in_r_originator_A_TTPID_a1__1111211: //in 'r',<'originator', $A, TTPID, a1> 
 [ Fr(~prog_11112111), State_1111211($A, $B, ~prog_, ~prog_111, TTPID), In(<'originator', $A, TTPID, a1>), MID_Receiver(mid_1111211)] --[ProgressFrom_11112111(~prog_11112111), Receive(mid_1111211,<'originator', $A, TTPID, a1>)]-> [State_11112111($A, $B, ~prog_, ~prog_111, ~prog_11112111, TTPID, a1)]

rule lock_sign_A_B_TTPID_TEXT_hna_sk_A_11112111: //lock sign(<$A, $B, TTPID, $TEXT, h(na)>, sk($A)) 
 [ State_11112111($A, $B, ~prog_, ~prog_111, ~prog_11112111, TTPID, a1), Fr(~lock8)] --[Lock(~lock8, sign(<$A, $B, TTPID, $TEXT, h(na)>, sk($A)))]-> [State_111121111($A, $B, ~lock8, ~prog_, ~prog_111, ~prog_11112111, TTPID, a1)]

rule lookup_F_Resolved_TTPID_sign_A_B_TTPID_TEXT_hna_sk_A_as_y_0_111121111: //lookup <'F_Resolved', TTPID, sign(<$A, $B, TTPID, $TEXT, h(na)>, sk($A))> as y, 0 
 [ State_111121111($A, $B, ~lock8, ~prog_, ~prog_111, ~prog_11112111, TTPID, a1)] --[IsIn(<'F_Resolved', TTPID, sign(<$A, $B, TTPID, $TEXT, h(na)>, sk($A))>, y)]-> [State_1111211111($A, $B, ~lock8, ~prog_, ~prog_111, ~prog_11112111, TTPID, a1, y)]

rule lookup_F_Resolved_TTPID_sign_A_B_TTPID_TEXT_hna_sk_A_as_y_1_111121111: //lookup <'F_Resolved', TTPID, sign(<$A, $B, TTPID, $TEXT, h(na)>, sk($A))> as y, 1 
 [ State_111121111($A, $B, ~lock8, ~prog_, ~prog_111, ~prog_11112111, TTPID, a1)] --[IsNotSet(<'F_Resolved', TTPID, sign(<$A, $B, TTPID, $TEXT, h(na)>, sk($A))>)]-> [State_1111211112($A, $B, ~lock8, ~prog_, ~prog_111, ~prog_11112111, TTPID, a1)]

rule out_r_originator_TTPID_A_sign_sign_A_B_TTPID_TEXT_hna_sk_A_y_skTTPID__1111211111: //out 'r',<'originator', TTPID, $A, sign(<sign(<$A, $B, TTPID, $TEXT, h(na)>, sk($A)), y>, sk(TTPID))> 
 [ MID_Sender(mid_1111211111), State_1111211111($A, $B, ~lock8, ~prog_, ~prog_111, ~prog_11112111, TTPID, a1, y)] --[Send(mid_1111211111,<'originator', TTPID, $A, sign(<sign(<$A, $B, TTPID, $TEXT, h(na)>, sk($A)), y>, sk(TTPID))>)]-> [Out(<'originator', TTPID, $A, sign(<sign(<$A, $B, TTPID, $TEXT, h(na)>, sk($A)), y>, sk(TTPID))>), State_11112111111($A, $B, ~lock8, ~prog_, ~prog_111, ~prog_11112111, TTPID, a1, y)]

rule unlock_sign_A_B_TTPID_TEXT_hna_sk_A_11112111111: //unlock sign(<$A, $B, TTPID, $TEXT, h(na)>, sk($A)) 
 [ State_11112111111($A, $B, ~lock8, ~prog_, ~prog_111, ~prog_11112111, TTPID, a1, y)] --[ProgressTo_111121111111(~prog_11112111), Unlock(~lock8, sign(<$A, $B, TTPID, $TEXT, h(na)>, sk($A)))]-> [State_111121111111($A, $B, ~lock8, ~prog_, ~prog_111, ~prog_11112111, TTPID, a1, y)]

rule Zero_111121111111: //Zero 
 [ State_111121111111($A, $B, ~lock8, ~prog_, ~prog_111, ~prog_11112111, TTPID, a1, y)] --[]-> []

rule insert_Aborted_TTPID_sign_A_B_TTPID_TEXT_hna_sk_A_Aborted__1111211112: //insert <'Aborted', TTPID, sign(<$A, $B, TTPID, $TEXT, h(na)>, sk($A))>,'Aborted' 
 [ State_1111211112($A, $B, ~lock8, ~prog_, ~prog_111, ~prog_11112111, TTPID, a1)] --[Insert(<'Aborted', TTPID, sign(<$A, $B, TTPID, $TEXT, h(na)>, sk($A))>, 'Aborted')]-> [State_11112111121($A, $B, ~lock8, ~prog_, ~prog_111, ~prog_11112111, TTPID, a1)]

rule event_TTPAbort1TTPID_A_B_TEXT_nb_11112111121: //event TTPAbort1(TTPID, $A, $B, $TEXT, nb) 
 [ State_11112111121($A, $B, ~lock8, ~prog_, ~prog_111, ~prog_11112111, TTPID, a1)] --[Event(), TTPAbort1(TTPID, $A, $B, $TEXT, nb)]-> [State_111121111211($A, $B, ~lock8, ~prog_, ~prog_111, ~prog_11112111, TTPID, a1)]

rule event_TTPAbortTTPID_A_B_TEXT_na_111121111211: //event TTPAbort(TTPID, $A, $B, $TEXT, na) 
 [ State_111121111211($A, $B, ~lock8, ~prog_, ~prog_111, ~prog_11112111, TTPID, a1)] --[Event(), TTPAbort(TTPID, $A, $B, $TEXT, na)]-> [State_1111211112111($A, $B, ~lock8, ~prog_, ~prog_111, ~prog_11112111, TTPID, a1)]

rule out_r_originator_TTPID_A_sign_Aborted_a1_skTTPID__1111211112111: //out 'r',<'originator', TTPID, $A, sign(<'Aborted', a1>, sk(TTPID))> 
 [ MID_Sender(mid_1111211112111), State_1111211112111($A, $B, ~lock8, ~prog_, ~prog_111, ~prog_11112111, TTPID, a1)] --[Send(mid_1111211112111,<'originator', TTPID, $A, sign(<'Aborted', a1>, sk(TTPID))>)]-> [Out(<'originator', TTPID, $A, sign(<'Aborted', a1>, sk(TTPID))>), State_11112111121111($A, $B, ~lock8, ~prog_, ~prog_111, ~prog_11112111, TTPID, a1)]

rule unlock_sign_A_B_TTPID_TEXT_hna_sk_A_11112111121111: //unlock sign(<$A, $B, TTPID, $TEXT, h(na)>, sk($A)) 
 [ State_11112111121111($A, $B, ~lock8, ~prog_, ~prog_111, ~prog_11112111, TTPID, a1)] --[ProgressTo_111121111211111(~prog_11112111), Unlock(~lock8, sign(<$A, $B, TTPID, $TEXT, h(na)>, sk($A)))]-> [State_111121111211111($A, $B, ~lock8, ~prog_, ~prog_111, ~prog_11112111, TTPID, a1)]

rule Zero_111121111211111: //Zero 
 [ State_111121111211111($A, $B, ~lock8, ~prog_, ~prog_111, ~prog_11112111, TTPID, a1)] --[]-> []

rule in_r_originator_A_TTPID_m1_m2__1111212: //in 'r',<'originator', $A, TTPID, <m1, m2>> 
 [ Fr(~prog_11112121), State_1111212($A, $B, ~prog_, ~prog_111, TTPID), In(<'originator', $A, TTPID, <m1, m2>>), MID_Receiver(mid_1111212)] --[ProgressFrom_11112121(~prog_11112121), Receive(mid_1111212,<'originator', $A, TTPID, <m1, m2>>)]-> [State_11112121($A, $B, ~prog_, ~prog_111, ~prog_11112121, TTPID, m1, m2)]

rule lock_m1_11112121: //lock m1 
 [ State_11112121($A, $B, ~prog_, ~prog_111, ~prog_11112121, TTPID, m1, m2), Fr(~lock7)] --[Lock(~lock7, m1)]-> [State_111121211($A, $B, ~lock7, ~prog_, ~prog_111, ~prog_11112121, TTPID, m1, m2)]

rule lookup_Aborted_TTPID_m1_as_x_0_111121211: //lookup <'Aborted', TTPID, m1> as x, 0 
 [ State_111121211($A, $B, ~lock7, ~prog_, ~prog_111, ~prog_11112121, TTPID, m1, m2)] --[IsIn(<'Aborted', TTPID, m1>, x)]-> [State_1111212111($A, $B, ~lock7, ~prog_, ~prog_111, ~prog_11112121, TTPID, m1, m2, x)]

rule lookup_Aborted_TTPID_m1_as_x_1_111121211: //lookup <'Aborted', TTPID, m1> as x, 1 
 [ State_111121211($A, $B, ~lock7, ~prog_, ~prog_111, ~prog_11112121, TTPID, m1, m2)] --[IsNotSet(<'Aborted', TTPID, m1>)]-> [State_1111212112($A, $B, ~lock7, ~prog_, ~prog_111, ~prog_11112121, TTPID, m1, m2)]

rule event_TTPAbortTTPID_A_B_TEXT_na_1111212111: //event TTPAbort(TTPID, $A, $B, $TEXT, na) 
 [ State_1111212111($A, $B, ~lock7, ~prog_, ~prog_111, ~prog_11112121, TTPID, m1, m2, x)] --[Event(), TTPAbort(TTPID, $A, $B, $TEXT, na)]-> [State_11112121111($A, $B, ~lock7, ~prog_, ~prog_111, ~prog_11112121, TTPID, m1, m2, x)]

rule out_r_originator_TTPID_A_sign_Aborted_sign_Abort_m1_sk_A_skTTPID__11112121111: //out 'r',<'originator', TTPID, $A, sign(<'Aborted', sign(<'Abort', m1>, sk($A))>, sk(TTPID))> 
 [ MID_Sender(mid_11112121111), State_11112121111($A, $B, ~lock7, ~prog_, ~prog_111, ~prog_11112121, TTPID, m1, m2, x)] --[Send(mid_11112121111,<'originator', TTPID, $A, sign(<'Aborted', sign(<'Abort', m1>, sk($A))>, sk(TTPID))>)]-> [Out(<'originator', TTPID, $A, sign(<'Aborted', sign(<'Abort', m1>, sk($A))>, sk(TTPID))>), State_111121211111($A, $B, ~lock7, ~prog_, ~prog_111, ~prog_11112121, TTPID, m1, m2, x)]

rule unlock_m1_111121211111: //unlock m1 
 [ State_111121211111($A, $B, ~lock7, ~prog_, ~prog_111, ~prog_11112121, TTPID, m1, m2, x)] --[ProgressTo_1111212111111(~prog_11112121), Unlock(~lock7, m1)]-> [State_1111212111111($A, $B, ~lock7, ~prog_, ~prog_111, ~prog_11112121, TTPID, m1, m2, x)]

rule Zero_1111212111111: //Zero 
 [ State_1111212111111($A, $B, ~lock7, ~prog_, ~prog_111, ~prog_11112121, TTPID, m1, m2, x)] --[]-> []

rule insert_F_Resolved_TTPID_m1_m2_1111212112: //insert <'F_Resolved', TTPID, m1>,m2 
 [ State_1111212112($A, $B, ~lock7, ~prog_, ~prog_111, ~prog_11112121, TTPID, m1, m2)] --[Insert(<'F_Resolved', TTPID, m1>, m2)]-> [State_11112121121($A, $B, ~lock7, ~prog_, ~prog_111, ~prog_11112121, TTPID, m1, m2)]

rule event_InitiatorResolvedTTPID_A_B_TEXT_na_11112121121: //event InitiatorResolved(TTPID, $A, $B, $TEXT, na) 
 [ State_11112121121($A, $B, ~lock7, ~prog_, ~prog_111, ~prog_11112121, TTPID, m1, m2)] --[Event(), InitiatorResolved(TTPID, $A, $B, $TEXT, na)]-> [State_111121211211($A, $B, ~lock7, ~prog_, ~prog_111, ~prog_11112121, TTPID, m1, m2)]

rule out_r_originator_TTPID_A_sign_m1_m2_skTTPID__111121211211: //out 'r',<'originator', TTPID, $A, sign(<m1, m2>, sk(TTPID))> 
 [ MID_Sender(mid_111121211211), State_111121211211($A, $B, ~lock7, ~prog_, ~prog_111, ~prog_11112121, TTPID, m1, m2)] --[Send(mid_111121211211,<'originator', TTPID, $A, sign(<m1, m2>, sk(TTPID))>)]-> [Out(<'originator', TTPID, $A, sign(<m1, m2>, sk(TTPID))>), State_1111212112111($A, $B, ~lock7, ~prog_, ~prog_111, ~prog_11112121, TTPID, m1, m2)]

rule unlock_m1_1111212112111: //unlock m1 
 [ State_1111212112111($A, $B, ~lock7, ~prog_, ~prog_111, ~prog_11112121, TTPID, m1, m2)] --[ProgressTo_11112121121111(~prog_11112121), Unlock(~lock7, m1)]-> [State_11112121121111($A, $B, ~lock7, ~prog_, ~prog_111, ~prog_11112121, TTPID, m1, m2)]

rule Zero_11112121121111: //Zero 
 [ State_11112121121111($A, $B, ~lock7, ~prog_, ~prog_111, ~prog_11112121, TTPID, m1, m2)] --[]-> []

rule in_r_responder_B_TTPID_m1_m2__111122: //in 'r',<'responder', $B, TTPID, <m1, m2>> 
 [ Fr(~prog_1111221), State_111122($A, $B, ~prog_, ~prog_111, TTPID), In(<'responder', $B, TTPID, <m1, m2>>), MID_Receiver(mid_111122)] --[ProgressFrom_1111221(~prog_1111221), Receive(mid_111122,<'responder', $B, TTPID, <m1, m2>>)]-> [State_1111221($A, $B, ~prog_, ~prog_111, ~prog_1111221, TTPID, m1, m2)]

rule lock_m1_1111221: //lock m1 
 [ State_1111221($A, $B, ~prog_, ~prog_111, ~prog_1111221, TTPID, m1, m2), Fr(~lock7)] --[Lock(~lock7, m1)]-> [State_11112211($A, $B, ~lock7, ~prog_, ~prog_111, ~prog_1111221, TTPID, m1, m2)]

rule lookup_Aborted_TTPID_m1_as_x_0_11112211: //lookup <'Aborted', TTPID, m1> as x, 0 
 [ State_11112211($A, $B, ~lock7, ~prog_, ~prog_111, ~prog_1111221, TTPID, m1, m2)] --[IsIn(<'Aborted', TTPID, m1>, x)]-> [State_111122111($A, $B, ~lock7, ~prog_, ~prog_111, ~prog_1111221, TTPID, m1, m2, x)]

rule lookup_Aborted_TTPID_m1_as_x_1_11112211: //lookup <'Aborted', TTPID, m1> as x, 1 
 [ State_11112211($A, $B, ~lock7, ~prog_, ~prog_111, ~prog_1111221, TTPID, m1, m2)] --[IsNotSet(<'Aborted', TTPID, m1>)]-> [State_111122112($A, $B, ~lock7, ~prog_, ~prog_111, ~prog_1111221, TTPID, m1, m2)]

rule out_r_responder_TTPID_B_sign_Aborted_sign_Abort_m1_sk_A_hnb_skTTPID__111122111: //out 'r',<'responder', TTPID, $B, sign(<'Aborted', sign(<'Abort', m1>, sk($A)), h(nb)>, sk(TTPID))> 
 [ MID_Sender(mid_111122111), State_111122111($A, $B, ~lock7, ~prog_, ~prog_111, ~prog_1111221, TTPID, m1, m2, x)] --[Send(mid_111122111,<'responder', TTPID, $B, sign(<'Aborted', sign(<'Abort', m1>, sk($A)), h(nb)>, sk(TTPID))>)]-> [Out(<'responder', TTPID, $B, sign(<'Aborted', sign(<'Abort', m1>, sk($A)), h(nb)>, sk(TTPID))>), State_1111221111($A, $B, ~lock7, ~prog_, ~prog_111, ~prog_1111221, TTPID, m1, m2, x)]

rule event_TTPAbortTTPID_A_B_TEXT_na_1111221111: //event TTPAbort(TTPID, $A, $B, $TEXT, na) 
 [ State_1111221111($A, $B, ~lock7, ~prog_, ~prog_111, ~prog_1111221, TTPID, m1, m2, x)] --[Event(), TTPAbort(TTPID, $A, $B, $TEXT, na)]-> [State_11112211111($A, $B, ~lock7, ~prog_, ~prog_111, ~prog_1111221, TTPID, m1, m2, x)]

rule unlock_m1_11112211111: //unlock m1 
 [ State_11112211111($A, $B, ~lock7, ~prog_, ~prog_111, ~prog_1111221, TTPID, m1, m2, x)] --[ProgressTo_111122111111(~prog_1111221), Unlock(~lock7, m1)]-> [State_111122111111($A, $B, ~lock7, ~prog_, ~prog_111, ~prog_1111221, TTPID, m1, m2, x)]

rule Zero_111122111111: //Zero 
 [ State_111122111111($A, $B, ~lock7, ~prog_, ~prog_111, ~prog_1111221, TTPID, m1, m2, x)] --[]-> []

rule insert_F_Resolved_TTPID_m1_m2_111122112: //insert <'F_Resolved', TTPID, m1>,m2 
 [ State_111122112($A, $B, ~lock7, ~prog_, ~prog_111, ~prog_1111221, TTPID, m1, m2)] --[Insert(<'F_Resolved', TTPID, m1>, m2)]-> [State_1111221121($A, $B, ~lock7, ~prog_, ~prog_111, ~prog_1111221, TTPID, m1, m2)]

rule event_ResponderResolvedTTPID_A_B_TEXT_na_1111221121: //event ResponderResolved(TTPID, $A, $B, $TEXT, na) 
 [ State_1111221121($A, $B, ~lock7, ~prog_, ~prog_111, ~prog_1111221, TTPID, m1, m2)] --[Event(), ResponderResolved(TTPID, $A, $B, $TEXT, na)]-> [State_11112211211($A, $B, ~lock7, ~prog_, ~prog_111, ~prog_1111221, TTPID, m1, m2)]

rule out_r_responder_TTPID_B_sign_m1_m2_skTTPID__11112211211: //out 'r',<'responder', TTPID, $B, sign(<m1, m2>, sk(TTPID))> 
 [ MID_Sender(mid_11112211211), State_11112211211($A, $B, ~lock7, ~prog_, ~prog_111, ~prog_1111221, TTPID, m1, m2)] --[Send(mid_11112211211,<'responder', TTPID, $B, sign(<m1, m2>, sk(TTPID))>)]-> [Out(<'responder', TTPID, $B, sign(<m1, m2>, sk(TTPID))>), State_111122112111($A, $B, ~lock7, ~prog_, ~prog_111, ~prog_1111221, TTPID, m1, m2)]

rule unlock_m1_111122112111: //unlock m1 
 [ State_111122112111($A, $B, ~lock7, ~prog_, ~prog_111, ~prog_1111221, TTPID, m1, m2)] --[ProgressTo_1111221121111(~prog_1111221), Unlock(~lock7, m1)]-> [State_1111221121111($A, $B, ~lock7, ~prog_, ~prog_111, ~prog_1111221, TTPID, m1, m2)]

rule Zero_1111221121111: //Zero 
 [ State_1111221121111($A, $B, ~lock7, ~prog_, ~prog_111, ~prog_1111221, TTPID, m1, m2)] --[]-> []

rule Par_1112: //Par 
 [ State_1112($A, $B, ~prog_, ~prog_111, TTPID)] --[ProgressTo_11122(~prog_111), ProgressTo_11121(~prog_111)]-> [State_11121($A, $B, ~prog_, ~prog_111, TTPID), State_11122($A, $B, ~prog_, ~prog_111, TTPID)]

rule in_c_m4_m2_m3_m1__11121: //in 'c',<m4, m2, m3, m1> 
 [ Fr(~prog_111211), State_11121($A, $B, ~prog_, ~prog_111, TTPID), In(<'c', <m4, m2, m3, m1>>)] --[ProgressFrom_111211(~prog_111211), ChannelInEvent(<'c', <m4, m2, m3, m1>>)]-> [State_111211($A, $B, ~prog_, ~prog_111, ~prog_111211, TTPID, m1, m2, m3, m4)]

rule event_ContractJudge_A_B_TEXT_111211: //event ContractJudge($A, $B, $TEXT) 
 [ State_111211($A, $B, ~prog_, ~prog_111, ~prog_111211, TTPID, m1, m2, m3, m4)] --[ProgressTo_1112111(~prog_111211), Event(), ContractJudge($A, $B, $TEXT)]-> [State_1112111($A, $B, ~prog_, ~prog_111, ~prog_111211, TTPID, m1, m2, m3, m4)]

rule Zero_1112111: //Zero 
 [ State_1112111($A, $B, ~prog_, ~prog_111, ~prog_111211, TTPID, m1, m2, m3, m4)] --[]-> []

rule in_c_sign_m1_m2_skTTPID_11122: //in 'c',sign(<m1, m2>, sk(TTPID)) 
 [ Fr(~prog_111221), State_11122($A, $B, ~prog_, ~prog_111, TTPID), In(<'c', sign(<m1, m2>, sk(TTPID))>)] --[ProgressFrom_111221(~prog_111221), ChannelInEvent(<'c', sign(<m1, m2>, sk(TTPID))>)]-> [State_111221($A, $B, ~prog_, ~prog_111, ~prog_111221, TTPID, m1, m2)]

rule event_ContractJudge_A_B_TEXT_111221: //event ContractJudge($A, $B, $TEXT) 
 [ State_111221($A, $B, ~prog_, ~prog_111, ~prog_111221, TTPID, m1, m2)] --[ProgressTo_1112211(~prog_111221), Event(), ContractJudge($A, $B, $TEXT)]-> [State_1112211($A, $B, ~prog_, ~prog_111, ~prog_111221, TTPID, m1, m2)]

rule Zero_1112211: //Zero 
 [ State_1112211($A, $B, ~prog_, ~prog_111, ~prog_111221, TTPID, m1, m2)] --[]-> []

rule Rep_0_2: //Rep, 0 
 [ State_2(~prog_)] --[]-> [!Semistate_21(~prog_)]

rule Rep_1_2: //Rep, 1 
 [ !Semistate_21(~prog_)] --[]-> [State_21(~prog_)]

rule in_c_corrupt_x__21: //in 'c',<'corrupt', $x> 
 [ Fr(~prog_211), State_21(~prog_), In(<'c', <'corrupt', $x>>)] --[ProgressFrom_211(~prog_211), ChannelInEvent(<'c', <'corrupt', $x>>)]-> [State_211($x, ~prog_, ~prog_211)]

rule event_Corrupt_x_211: //event Corrupt($x) 
 [ State_211($x, ~prog_, ~prog_211)] --[Event(), Corrupt($x)]-> [State_2111($x, ~prog_, ~prog_211)]

rule out_c_sk_x_2111: //out 'c',sk($x) 
 [ State_2111($x, ~prog_, ~prog_211), In('c')] --[ChannelInEvent('c')]-> [State_21111($x, ~prog_, ~prog_211), Out(sk($x))]

rule Par_21111: //Par 
 [ State_21111($x, ~prog_, ~prog_211)] --[ProgressTo_211112(~prog_211)]-> [State_211111($x, ~prog_, ~prog_211), State_211112($x, ~prog_, ~prog_211)]

rule Par_211111: //Par 
 [ State_211111($x, ~prog_, ~prog_211)] --[ProgressTo_2111112(~prog_211)]-> [State_2111111($x, ~prog_, ~prog_211), State_2111112($x, ~prog_, ~prog_211)]

rule Par_2111111: //Par 
 [ State_2111111($x, ~prog_, ~prog_211)] --[ProgressTo_21111112(~prog_211), ProgressTo_21111111(~prog_211)]-> [State_21111111($x, ~prog_, ~prog_211), State_21111112($x, ~prog_, ~prog_211)]

rule Rep_0_21111111: //Rep, 0 
 [ State_21111111($x, ~prog_, ~prog_211)] --[]-> [!Semistate_211111111($x, ~prog_, ~prog_211)]

rule Rep_1_21111111: //Rep, 1 
 [ !Semistate_211111111($x, ~prog_, ~prog_211)] --[]-> [State_211111111($x, ~prog_, ~prog_211)]

rule in_r_responder_x_TTPID_m__211111111: //in 'r',<'responder', $x, TTPID, m> 
 [ State_211111111($x, ~prog_, ~prog_211), In(<'responder', $x, TTPID, m>), MID_Receiver(mid_211111111)] --[Receive(mid_211111111,<'responder', $x, TTPID, m>)]-> [State_2111111111($x, ~prog_, ~prog_211, TTPID, m)]

rule Zero_2111111111: //Zero 
 [ State_2111111111($x, ~prog_, ~prog_211, TTPID, m)] --[]-> []

rule Rep_0_21111112: //Rep, 0 
 [ State_21111112($x, ~prog_, ~prog_211)] --[]-> [!Semistate_211111121($x, ~prog_, ~prog_211)]

rule Rep_1_21111112: //Rep, 1 
 [ !Semistate_211111121($x, ~prog_, ~prog_211)] --[]-> [State_211111121($x, ~prog_, ~prog_211)]

rule in_r_originator_x_TTPID_m__211111121: //in 'r',<'originator', $x, TTPID, m> 
 [ State_211111121($x, ~prog_, ~prog_211), In(<'originator', $x, TTPID, m>), MID_Receiver(mid_211111121)] --[Receive(mid_211111121,<'originator', $x, TTPID, m>)]-> [State_2111111211($x, ~prog_, ~prog_211, TTPID, m)]

rule Zero_2111111211: //Zero 
 [ State_2111111211($x, ~prog_, ~prog_211, TTPID, m)] --[]-> []

rule Rep_0_2111112: //Rep, 0 
 [ State_2111112($x, ~prog_, ~prog_211)] --[]-> [!Semistate_21111121($x, ~prog_, ~prog_211)]

rule Rep_1_2111112: //Rep, 1 
 [ !Semistate_21111121($x, ~prog_, ~prog_211)] --[]-> [State_21111121($x, ~prog_, ~prog_211)]

rule in_r_responder_TTPID_x_m__21111121: //in 'r',<'responder', TTPID, $x, m> 
 [ State_21111121($x, ~prog_, ~prog_211), In(<'responder', TTPID, $x, m>), MID_Receiver(mid_21111121)] --[Receive(mid_21111121,<'responder', TTPID, $x, m>)]-> [State_211111211($x, ~prog_, ~prog_211, TTPID, m)]

rule Zero_211111211: //Zero 
 [ State_211111211($x, ~prog_, ~prog_211, TTPID, m)] --[]-> []

rule Rep_0_211112: //Rep, 0 
 [ State_211112($x, ~prog_, ~prog_211)] --[]-> [!Semistate_2111121($x, ~prog_, ~prog_211)]

rule Rep_1_211112: //Rep, 1 
 [ !Semistate_2111121($x, ~prog_, ~prog_211)] --[]-> [State_2111121($x, ~prog_, ~prog_211)]

rule in_r_originator_TTPID_x_m__2111121: //in 'r',<'originator', TTPID, $x, m> 
 [ State_2111121($x, ~prog_, ~prog_211), In(<'originator', TTPID, $x, m>), MID_Receiver(mid_2111121)] --[Receive(mid_2111121,<'originator', TTPID, $x, m>)]-> [State_21111211($x, ~prog_, ~prog_211, TTPID, m)]

rule Zero_21111211: //Zero 
 [ State_21111211($x, ~prog_, ~prog_211, TTPID, m)] --[]-> []

 restriction set_in:
"All x y #t3 . IsIn(x,y)@t3 ==>
        (Ex #t2 . Insert(x,y)@t2 & #t2<#t3 
                & ( All #t1 . Delete(x)@t1 ==> (#t1<#t2 |  #t3<#t1))
                & ( All #t1 yp . Insert(x,yp)@t1 ==> (#t1<#t2 | #t1=#t2 | #t3<#t1))
)"

restriction set_notin:
"All x #t3 . IsNotSet(x)@t3 ==> 
        (All #t1 y . Insert(x,y)@t1 ==>  #t3<#t1 )
  | ( Ex #t1 .   Delete(x)@t1 & #t1<#t3 
                &  (All #t2 y . Insert(x,y)@t2 & #t2<#t3 ==>  #t2<#t1))"


restriction locking:
"All l x lp #t1 #t3 . Lock(l,x)@t1 & Lock(lp,x)@t3 
        ==> 
        ( #t1<#t3 
                & (Ex #t2. Unlock(l,x)@t2 & #t1<#t2 & #t2<#t3 
                 & (All  #t0 . Unlock(l,x)@t0 ==> #t0=#t2) 
                 & (All lp #t0 . Lock(lp,x)@t0 ==> #t0<#t1 | #t0=#t1 | #t2<#t0) 
                 & (All lp #t0 . Unlock(lp,x)@t0 ==> #t0<#t1 | #t2<#t0 | #t2=#t0 )
                ))
        | #t3<#t1 | #t1=#t3 "


restriction single_session: // for a single session
    "All #i #j. Init()@i & Init()@j ==> #i=#j"


restriction progress_1111221_to_111122111111_or_1111221121111:
    "All p #t1. ProgressFrom_1111221(p )@t1 ==> 
       (Ex #t2. ProgressTo_111122111111(p )@t2)
	 | (Ex #t2. ProgressTo_1111221121111(p )@t2)
    "

restriction progress_111221_to_1112211:
    "All p #t1. ProgressFrom_111221(p )@t1 ==> 
       (Ex #t2. ProgressTo_1112211(p )@t2)
    "

restriction progress_11111211112121_to_1111121111212111:
    "All p #t1. ProgressFrom_11111211112121(p )@t1 ==> 
       (Ex #t2. ProgressTo_1111121111212111(p )@t2)
    "

restriction progress_111111111112121_to_11111111111212111:
    "All p #t1. ProgressFrom_111111111112121(p )@t1 ==> 
       (Ex #t2. ProgressTo_11111111111212111(p )@t2)
    "

restriction progress_11112121_to_1111212111111_or_11112121121111:
    "All p #t1. ProgressFrom_11112121(p )@t1 ==> 
       (Ex #t2. ProgressTo_1111212111111(p )@t2)
	 | (Ex #t2. ProgressTo_11112121121111(p )@t2)
    "

restriction progress_1111121_to_111112111111111_or_111112111121:
    "All p #t1. ProgressFrom_1111121(p )@t1 ==> 
       (Ex #t2. ProgressTo_111112111111111(p )@t2)
	 | (Ex #t2. ProgressTo_111112111121(p )@t2)
    "

restriction progress_11111111111111211_to_1111111111111121111:
    "All p #t1. ProgressFrom_11111111111111211(p )@t1 ==> 
       (Ex #t2. ProgressTo_1111111111111121111(p )@t2)
    "

restriction progress_111211_to_1112111:
    "All p #t1. ProgressFrom_111211(p )@t1 ==> 
       (Ex #t2. ProgressTo_1112111(p )@t2)
    "

restriction progress_211_to_211112:
    "All p #t1. ProgressFrom_211(p )@t1 ==> 
       (Ex #t2. ProgressTo_211112(p )@t2)
    "

restriction progress_211_to_2111112:
    "All p #t1. ProgressFrom_211(p )@t1 ==> 
       (Ex #t2. ProgressTo_2111112(p )@t2)
    "

restriction progress_211_to_21111112:
    "All p #t1. ProgressFrom_211(p )@t1 ==> 
       (Ex #t2. ProgressTo_21111112(p )@t2)
    "

restriction progress_211_to_21111111:
    "All p #t1. ProgressFrom_211(p )@t1 ==> 
       (Ex #t2. ProgressTo_21111111(p )@t2)
    "

restriction progress_11111211112111_to_11111211112111111:
    "All p #t1. ProgressFrom_11111211112111(p )@t1 ==> 
       (Ex #t2. ProgressTo_11111211112111111(p )@t2)
    "

restriction progress_111111111112111_to_11111111111211111:
    "All p #t1. ProgressFrom_111111111112111(p )@t1 ==> 
       (Ex #t2. ProgressTo_11111111111211111(p )@t2)
    "

restriction progress_11112111_to_111121111111_or_111121111211111:
    "All p #t1. ProgressFrom_11112111(p )@t1 ==> 
       (Ex #t2. ProgressTo_111121111111(p )@t2)
	 | (Ex #t2. ProgressTo_111121111211111(p )@t2)
    "

restriction progress_1111111_to_111111111111111111_or_1111111111121_or_1111111111111121:
    "All p #t1. ProgressFrom_1111111(p )@t1 ==> 
       (Ex #t2. ProgressTo_111111111111111111(p )@t2)
	 | (Ex #t2. ProgressTo_1111111111121(p )@t2)
	 | (Ex #t2. ProgressTo_1111111111111121(p )@t2)
    "

restriction progress_111_to_111122:
    "All p #t1. ProgressFrom_111(p )@t1 ==> 
       (Ex #t2. ProgressTo_111122(p )@t2)
    "

restriction progress_111_to_11122:
    "All p #t1. ProgressFrom_111(p )@t1 ==> 
       (Ex #t2. ProgressTo_11122(p )@t2)
    "

restriction progress_111_to_1111212:
    "All p #t1. ProgressFrom_111(p )@t1 ==> 
       (Ex #t2. ProgressTo_1111212(p )@t2)
    "

restriction progress_111_to_111112:
    "All p #t1. ProgressFrom_111(p )@t1 ==> 
       (Ex #t2. ProgressTo_111112(p )@t2)
    "

restriction progress_111_to_11121:
    "All p #t1. ProgressFrom_111(p )@t1 ==> 
       (Ex #t2. ProgressTo_11121(p )@t2)
    "

restriction progress_111_to_1111211:
    "All p #t1. ProgressFrom_111(p )@t1 ==> 
       (Ex #t2. ProgressTo_1111211(p )@t2)
    "

restriction progress_111_to_111111:
    "All p #t1. ProgressFrom_111(p )@t1 ==> 
       (Ex #t2. ProgressTo_111111(p )@t2)
    "

restriction progress__to_2:
    "All p #t1. ProgressFrom_(p )@t1 ==> 
       (Ex #t2. ProgressTo_2(p )@t2)
    "

restriction progress__to_1:
    "All p #t1. ProgressFrom_(p )@t1 ==> 
       (Ex #t2. ProgressTo_1(p )@t2)
    "


restriction progress_init:
    " Ex #t. Init()@t "

restriction resilient: 
    "All #i x y. Send(x,y)@i ==> Ex #j. Receive(x,y)@j & #i<#j "

lemma sanity_a1b1 : exists-trace
"	Ex #i #j a b t na. EndA1(a, b, t, na) @ i & EndB1(a, b, t, na) @ j & not( Ex #k. Corrupt(a) @ k ) & not( Ex #k. Corrupt(b) @ k )"

lemma sanity_a2b1 : exists-trace
"	Ex #i #j a b t nb. EndA2(a, b, t, nb) @ i & EndB1(a, b, t, nb) @ j & not( Ex #k. Corrupt(a) @ k ) & not( Ex #k. Corrupt(b) @ k )"

lemma sanity_a2b3 : exists-trace
"	Ex #i #j a b t nb. EndA2(a, b, t, nb) @ i & EndB3(a, b, t, nb) @ j & not( Ex #k. Corrupt(a) @ k ) & not( Ex #k. Corrupt(b) @ k )"

lemma sanity_a3b2 : exists-trace
"	Ex #i #j a b t nb. EndA3(a, b, t, nb) @ i & EndB2(a, b, t, nb) @ j & not( Ex #k. Corrupt(a) @ k ) & not( Ex #k. Corrupt(b) @ k )"

lemma sanity_a4b3 : exists-trace
"	Ex #i #j a b t nb. EndA4(a, b, t, nb) @ i & EndB3(a, b, t, nb) @ j & not( Ex #k. Corrupt(a) @ k ) & not( Ex #k. Corrupt(b) @ k )"

lemma timelinessB [reuse]:
"	All #i a b t nb. StartB(a, b, t, nb) @ i ==> ( Ex #j. ContractB(a, b, t, nb) @ j ) | ( Ex #j. AbortB(a, b, t, nb) @ j ) | ( Ex #j. Corrupt(b) @ j )"

lemma helper0 [reuse]:
"	All a b t na nb #i ttp. AbortB0(ttp, a, b, t, na, nb) @ i ==> Ex #j. TTPAbort(ttp, a, b, t, na) @ j"

lemma helper2 [reuse]:
"	not( Ex #i #j ttp a b t na. TTPAbort(ttp, a, b, t, na) @ i & InitiatorResolved(ttp, a, b, t, na) @ j )"

lemma helper3 [reuse]:
"	not( Ex #i #j ttp a b t na. TTPAbort(ttp, a, b, t, na) @ i & ResponderResolved(ttp, a, b, t, na) @ j )"

lemma fullfairnessB :
"	All #i a b t. ContractJudge(a, b, t) @ i ==> ( Ex #j nb. ContractB(a, b, t, nb) @ j ) | ( Ex #k. Corrupt(b) @ k )"

end
