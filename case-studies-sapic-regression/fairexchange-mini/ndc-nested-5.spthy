theory nestedNDC5
begin

functions: rep/2 [private], check_rep/2, get_rep/1
equations: check_rep(rep(m,loc),loc)=m, get_rep(rep(m,loc))=m
section{* small example for progression function *}

builtins: signing, hashing
rule Init_: //Init 
 [ Fr(~prog_)] --[Init(), ProgressFrom_(~prog_)]-> [State_(~prog_)]

rule MessageID_rule_: //MessageID-rule 
 [ Fr(~x)] --[]-> [MID_Sender(~x), MID_Receiver(~x)]

rule event_A_11: //event A() 
 [ State_(~prog_)] --[ProgressTo_111(~prog_), Event(), A()]-> [State_111(~prog_)]

rule Zero_111: //Zero 
 [ State_111(~prog_)] --[]-> []

rule Rep_0_12: //Rep, 0 
 [ State_(~prog_)] --[]-> [!Semistate_121(~prog_)]

rule Rep_1_12: //Rep, 1 
 [ !Semistate_121(~prog_)] --[]-> [State_121(~prog_)]

rule event_B_121: //event B() 
 [ State_121(~prog_)] --[ProgressTo_1211(~prog_), Event(), B()]-> [State_1211(~prog_)]

rule Zero_1211: //Zero 
 [ State_1211(~prog_)] --[]-> []

rule Rep_0_21: //Rep, 0 
 [ State_(~prog_)] --[]-> [!Semistate_211(~prog_)]

rule Rep_1_21: //Rep, 1 
 [ !Semistate_211(~prog_)] --[]-> [State_211(~prog_)]

rule event_C_211: //event C() 
 [ State_211(~prog_)] --[ProgressTo_2111(~prog_), Event(), C()]-> [State_2111(~prog_)]

rule Zero_2111: //Zero 
 [ State_2111(~prog_)] --[]-> []

rule Rep_0_22: //Rep, 0 
 [ State_(~prog_)] --[]-> [!Semistate_221(~prog_)]

rule Rep_1_22: //Rep, 1 
 [ !Semistate_221(~prog_)] --[]-> [State_221(~prog_)]

rule event_D_2211: //event D() 
 [ State_221(~prog_)] --[ProgressTo_22111(~prog_), Event(), D()]-> [State_22111(~prog_)]

rule Zero_22111: //Zero 
 [ State_22111(~prog_)] --[]-> []

rule Rep_0_2212: //Rep, 0 
 [ State_221(~prog_)] --[]-> [!Semistate_22121(~prog_)]

rule Rep_1_2212: //Rep, 1 
 [ !Semistate_22121(~prog_)] --[]-> [State_22121(~prog_)]

rule event_E_22121: //event E() 
 [ State_22121(~prog_)] --[ProgressTo_221211(~prog_), Event(), E()]-> [State_221211(~prog_)]

rule Zero_221211: //Zero 
 [ State_221211(~prog_)] --[]-> []


restriction single_session: // for a single session
    "All #i #j. Init()@i & Init()@j ==> #i=#j"


restriction progress__to_111_or_2111_or_22111_or_1211_or_221211:
    "All p #t1. ProgressFrom_(p )@t1 ==> 
       (Ex #t2. ProgressTo_111(p )@t2)
	 | (Ex #t2. ProgressTo_2111(p )@t2)
	 | (Ex #t2. ProgressTo_22111(p )@t2)
	 | (Ex #t2. ProgressTo_1211(p )@t2)
	 | (Ex #t2. ProgressTo_221211(p )@t2)
    "


restriction progress_init:
    " Ex #t. Init()@t "

restriction resilient: 
    "All #i x y. Send(x,y)@i ==> Ex #j. Receive(x,y)@j & #i<#j "

lemma A_possible : exists-trace
"	Ex #t. A() @ t"

lemma B_possible : exists-trace
"	Ex #t. B() @ t"

lemma C_possible : exists-trace
"	Ex #t. C() @ t"

lemma D_possible : exists-trace
"	Ex #t. D() @ t"

lemma E_possible : exists-trace
"	Ex #t. D() @ t"

lemma oneEventAlways :
"	( Ex #t. A() @ t ) | ( Ex #t. B() @ t ) | ( Ex #t. C() @ t ) | ( Ex #t. D() @ t ) | ( Ex #t. E() @ t )"

end
